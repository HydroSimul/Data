gdf_IC_out <- reshape2::melt(df_IC_out)
gdf_IC_out$time <- 1:200
gdf_IC_out$variable <- rep(seq(10, 90, 10), each = 200)
gg_BC <- ggplot(gdf_IC_out) +
geom_line(aes(time, value, group = variable, color = variable)) +
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari (IC):")
ggplotly(gg_BC)
lst_IC_in
lst_IC_out <- map(lst_IC_in, \(x) linear_reservoir_Num(Q_In = num_BC100, x, param_K = 60))
df_IC_out <- bind_cols(lst_IC_out) |> as.data.frame()
gdf_IC_out$time <- 1:200
gdf_IC_out$variable <- rep(seq(10, 90, 10), each = 200)
gg_BC <- ggplot(gdf_IC_out) +
geom_line(aes(time, value, group = variable, color = variable)) +
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari (IC):")
ggplotly(gg_BC)
linear_reservoir_Num
lst_IC_out <- map(lst_IC_in, linear_reservoir_Ana, Q_In = num_BC100, param_K = 60)
df_IC_out <- bind_cols(lst_IC_out) |> as.data.frame()
df_IC_out <- bind_cols(lst_IC_out) |> as.data.frame()
gdf_IC_out <- reshape2::melt(df_IC_out)
gdf_IC_out <- reshape2::melt(df_IC_out)
gdf_IC_out$time <- 1:200
gdf_IC_out$variable <- rep(seq(10, 90, 10), each = 200)
gg_BC <- ggplot(gdf_IC_out) +
geom_line(aes(time, value, group = variable, color = variable)) +
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari (IC):")
ggplotly(gg_BC)
lst_Param_in <- as.list(seq(10, 90, 10))
lst_Param_out <- map(lst_Param_in, linear_reservoir_Ana, Q_In = num_BC100, Q_Out0 = 0)
df_Param_out <- bind_cols(lst_Param_out) |> as.data.frame()
gdf_Param_out <- reshape2::melt(df_Param_out)
gdf_Param_out$time <- 1:200
gdf_Param_out$variable <- rep(seq(10, 90, 10), each = 200)
gg_BC <- ggplot(gdf_Param_out) +
geom_line(aes(time, value, group = variable, color = variable)) +
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari (Param):")
ggplotly(gg_BC)
color_DRESDEN <- c("#00305D", "#326491", "#649BBE", "#A0DCF0", "#0A9BA0", "#37B48C", "#A0C850", "#CDDC28")
color_TUD_redpurple <- "#93107d"
color_TUD_pink <- "#EC008D"
color_TUD_tomato <- "#e8412c"
color_TUD_orange <- "#ee7f00"
color_TUD_lightgreen <- "#69af22"
color_TUD_green <- "#007d3f"
color_TUD_bluegreen <- "#00aca9"
color_TUD_lightblue <- "#009de0"
color_TUD_blue <- "#00305d"
color_TUD_middleblue <- "#006ab2"
color_TUD_purple <- "#54368a"
color_TUD_continue <- c(color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange, "#CDDC28"
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_continue <- c(color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange, "#CDDC28",
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple)
unikn::seecol(color_TUD_continue)
unikn::seecol(color_DRESDEN)
color_TUD_diskrete <- color_TUD_continue[c(1,7,2,8,3,9,4,10,5,11,6)]
unikn::seecol(color_TUD_diskrete)
saveRDS(c(color_DRESDEN,
color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange,
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple,
color_TUD_continue, color_TUD_diskrete,
color_single_blue, color_single_green, color_single_purple, color_single_pink), "color.rds")
color_DRESDEN <- c("#00305D", "#326491", "#649BBE", "#A0DCF0", "#0A9BA0", "#37B48C", "#A0C850", "#CDDC28")
color_TUD_redpurple <- "#93107d"
color_TUD_pink <- "#EC008D"
color_TUD_tomato <- "#e8412c"
color_TUD_orange <- "#ee7f00"
color_TUD_lightgreen <- "#69af22"
color_TUD_green <- "#007d3f"
color_TUD_bluegreen <- "#00aca9"
color_TUD_lightblue <- "#009de0"
color_TUD_blue <- "#00305d"
color_TUD_middleblue <- "#006ab2"
color_TUD_purple <- "#54368a"
color_TUD_continue <- c(color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange, "#CDDC28",
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple)
color_TUD_diskrete <- color_TUD_continue[c(1,7,2,8,3,9,4,10,5,11,6)]
color_single_blue <- c("#cbffff", "#58a2b7", "#004c6d")
color_single_green <- c("#bbffd2", "#00EE76", "#007d3f")
color_single_purple <- c("#ffeaff", "#af8ac0", "#54368a")
color_single_pink <- c("#ffe0ff", "#f690d1", "#ee1289")
saveRDS(c(color_DRESDEN,
color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange,
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple,
color_TUD_continue, color_TUD_diskrete,
color_single_blue, color_single_green, color_single_purple, color_single_pink), "color.rds")
readRDS("../data_share/color.rds")
library(tidyverse)
theme_set(theme_bw())
library(plotly)
readRDS("../data_share/color.rds")
getwd()
getwd()
saveRDS(c(color_DRESDEN,
color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange,
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple,
color_TUD_continue, color_TUD_diskrete,
color_single_blue, color_single_green, color_single_purple, color_single_pink), "data_share/color.rds")
readRDS("../data_share/color.rds")
gg_BC <- ggplot(gdf_BC) +
geom_line(aes(time, value, group = variable, color = variable)) +
scale_color_manual(values = color_TUD_diskrete)+
facet_grid(cols = vars(facet))+
scale_alpha_manual(values = c(.6,1)) +
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari (BC):")
ggplotly(gg_BC)
gg_BC <- ggplot(gdf_IC_out) +
geom_line(aes(time, value, group = variable, color = variable)) +
scale_color_gradientn(colours = color_TUD_continue)+
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari\n(IC):")
ggplotly(gg_BC)
gg_BC <- ggplot(gdf_IC_out) +
geom_line(aes(time, value, group = variable, color = variable)) +
scale_color_gradientn(colours = color_DRESDEN)+
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari\n(IC):")
ggplotly(gg_BC)
linear_reservoir_Ana <- function(Q_In, Q_Out0 = 0, param_K = 1) {
n_Step <- length(Q_In)
Q_Out <- c(Q_Out0, rep(0, n_Step - 1))
for (i in 2:n_Step) {
Q_Out[i] <- Q_Out[i-1] + (Q_In[i] - Q_Out[i-1]) * (1 - exp(-1 / param_K)) + (Q_In[i] - Q_In[i-1]) * (1 - param_K * (1 - exp(-1 / param_K)))
}
Q_Out
}
linear_reservoir_Num <- function(Q_In, Q_Out0 = 0, param_K = 1) {
n_Step <- length(Q_In)
Q_Out <- c(Q_Out0, rep(0, n_Step - 1))
for (i in 2:n_Step) {
Q_Out[i] <- Q_Out[i-1] + (Q_In[i-1] - Q_Out[i-1]) / (param_K + 0.5) + (Q_In[i] - Q_In[i-1]) * .5 / (param_K + 0.5)
}
Q_Out
}
library(tidyverse)
theme_set(theme_bw())
library(plotly)
readRDS("../data_share/color.rds")
num_TestIn <- c(rep(100, 100), 0:100, rep(0,99))
num_Out_Ana <- linear_reservoir_Ana(num_TestIn, param_K = 60)
num_Out_Num <- linear_reservoir_Num(num_TestIn, param_K = 60)
gg_Test <- ggplot() +
geom_line(aes(1:300, num_TestIn, color = "Input")) +
geom_line(aes(1:300, num_Out_Ana, color = "Output\n(Analytical)")) +
geom_line(aes(1:300, num_Out_Num, color = "Output\n(Numerical)")) +
scale_color_manual(values = c("cyan", "red", "orange"))+
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "")
ggplotly(gg_Test)
#| code-fold: true
num_BC10 <- rep(c(10,0), each = 100)
num_BC50 <- rep(c(50,0), each = 100)
num_BC100 <- rep(c(100,0), each = 100)
num_BCin <- c(0:100, rep(0,99))
num_BCde <- c(100:0, rep(0,99))
lst_BC_in <- list(num_BC10, num_BC50, num_BC100, num_BCin, num_BCde)
df_BC_in <- bind_cols(lst_BC_in) |> as.data.frame()
names(df_BC_in) <- c("BC10", "BC50", "BC100", "BCin", "BCde")
gdf_BC_in <- reshape2::melt(df_BC_in)
gdf_BC_in$time <- 1:200
gdf_BC_in$facet <- "Q_In"
lst_BC_out <- map(lst_BC_in, linear_reservoir_Num, param_K = 60)
df_BC_out <- bind_cols(lst_BC_out) |> as.data.frame()
names(df_BC_out) <- c("BC10", "BC50", "BC100", "BCin", "BCde")
gdf_BC_out <- reshape2::melt(df_BC_out)
gdf_BC_out$time <- 1:200
gdf_BC_out$facet <- "Q_Out"
gdf_BC <- rbind(gdf_BC_in, gdf_BC_out)
gg_BC <- ggplot(gdf_BC) +
geom_line(aes(time, value, group = variable, color = variable)) +
scale_color_manual(values = color_TUD_diskrete)+
facet_grid(cols = vars(facet))+
scale_alpha_manual(values = c(.6,1)) +
labs(x = "Time [T]", y = "Water Flow [V/T]", color = "Vari (BC):")
ggplotly(gg_BC)
color <- readRDS("C:/Lei/HS_Web/data_share/color.rds")
saveRDS(list(color_DRESDEN,
color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange,
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple,
color_TUD_continue, color_TUD_diskrete,
color_single_blue, color_single_green, color_single_purple, color_single_pink), "data_share/color.rds")
color_DRESDEN <- c("#00305D", "#326491", "#649BBE", "#A0DCF0", "#0A9BA0", "#37B48C", "#A0C850", "#CDDC28")
color_TUD_redpurple <- "#93107d"
color_TUD_pink <- "#EC008D"
color_TUD_tomato <- "#e8412c"
color_TUD_orange <- "#ee7f00"
color_TUD_lightgreen <- "#69af22"
color_TUD_green <- "#007d3f"
color_TUD_bluegreen <- "#00aca9"
color_TUD_lightblue <- "#009de0"
color_TUD_blue <- "#00305d"
color_TUD_middleblue <- "#006ab2"
color_TUD_purple <- "#54368a"
color_TUD_continue <- c(color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange, "#CDDC28",
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple)
color_TUD_diskrete <- color_TUD_continue[c(1,7,2,8,3,9,4,10,5,11,6)]
color_single_blue <- c("#cbffff", "#58a2b7", "#004c6d")
color_single_green <- c("#bbffd2", "#00EE76", "#007d3f")
color_single_purple <- c("#ffeaff", "#af8ac0", "#54368a")
color_single_pink <- c("#ffe0ff", "#f690d1", "#ee1289")
saveRDS(list(color_DRESDEN,
color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange,
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple,
color_TUD_continue, color_TUD_diskrete,
color_single_blue, color_single_green, color_single_purple, color_single_pink), "data_share/color.rds")
color <- readRDS("C:/Lei/HS_Web/data_share/color.rds")
color_DRESDEN <- c("#00305D", "#326491", "#649BBE", "#A0DCF0", "#0A9BA0", "#37B48C", "#A0C850", "#CDDC28")
color_TUD_redpurple <- "#93107d"
color_TUD_pink <- "#EC008D"
color_TUD_tomato <- "#e8412c"
color_TUD_orange <- "#ee7f00"
color_TUD_lightgreen <- "#69af22"
color_TUD_green <- "#007d3f"
color_TUD_bluegreen <- "#00aca9"
color_TUD_lightblue <- "#009de0"
color_TUD_blue <- "#00305d"
color_TUD_middleblue <- "#006ab2"
color_TUD_purple <- "#54368a"
color_TUD_continue <- c(color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange, "#CDDC28",
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple)
color_TUD_diskrete <- color_TUD_continue[c(1,7,2,8,3,9,4,10,5,11,6)]
color_single_blue <- c("#cbffff", "#58a2b7", "#004c6d")
color_single_green <- c("#bbffd2", "#00EE76", "#007d3f")
color_single_purple <- c("#ffeaff", "#af8ac0", "#54368a")
color_single_pink <- c("#ffe0ff", "#f690d1", "#ee1289")
save(c(color_DRESDEN,
color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange,
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple,
color_TUD_continue, color_TUD_diskrete,
color_single_blue, color_single_green, color_single_purple, color_single_pink), "data_share/color.Rdata")
color_DRESDEN <- c("#00305D", "#326491", "#649BBE", "#A0DCF0", "#0A9BA0", "#37B48C", "#A0C850", "#CDDC28")
color_TUD_redpurple <- "#93107d"
color_TUD_pink <- "#EC008D"
color_TUD_tomato <- "#e8412c"
color_TUD_orange <- "#ee7f00"
color_TUD_lightgreen <- "#69af22"
color_TUD_green <- "#007d3f"
color_TUD_bluegreen <- "#00aca9"
color_TUD_lightblue <- "#009de0"
color_TUD_blue <- "#00305d"
color_TUD_middleblue <- "#006ab2"
color_TUD_purple <- "#54368a"
color_TUD_continue <- c(color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange, "#CDDC28",
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple)
color_TUD_diskrete <- color_TUD_continue[c(1,7,2,8,3,9,4,10,5,11,6)]
color_single_blue <- c("#cbffff", "#58a2b7", "#004c6d")
color_single_green <- c("#bbffd2", "#00EE76", "#007d3f")
color_single_purple <- c("#ffeaff", "#af8ac0", "#54368a")
color_single_pink <- c("#ffe0ff", "#f690d1", "#ee1289")
save(color_DRESDEN,
color_TUD_redpurple, color_TUD_pink, color_TUD_tomato,
color_TUD_orange,
color_TUD_lightgreen, color_TUD_green, color_TUD_bluegreen, color_TUD_blue, color_TUD_middleblue,
color_TUD_purple,
color_TUD_continue, color_TUD_diskrete,
color_single_blue, color_single_green, color_single_purple, color_single_pink,
file = "data_share/color.Rdata")
load("C:/Lei/HS_Web/data_share/color.Rdata")
360*276
reticulate::repl_python()
from netCDF4 import Dataset
from netCDF4 import Dataset
# Define the NetCDF file path
fn_NetCDF = "C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc"
# Open the NetCDF file
nc_Test = Dataset(fn_NetCDF, "r")
# Access the dimensions and get their names
dimension_names = [dim for dim in nc_Test.dimensions]
print("Dimension names:", dimension_names)
nc_Test.dimensions
print(nc_Test.dimensions)
nc_Test.variables
nc_Test.variables["T0"].size
nc_Test.__dict__
nc_Test.variables["T0"][:]
nc_Test.variables["T0"]
t0_variable[0:2, 0:3, 0:1]
t0_variable[0:2, 0:3, 0:1]
t0_variable = nc_Test.variables["T0"][:]
t0_variable[0:2, 0:3, 0:1]
print(nc_Test.variables["T0"].__dict__)
# Close the NetCDF file
nc_Test.close()
from netCDF4 import Dataset
# Define the NetCDF file path
fn_NetCDF = "C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc"
# Open the NetCDF file
nc_Test = Dataset(fn_NetCDF, "r")
# Access the dimensions
print(nc_Test.dimensions)
# Access the variables and get their names
print(nc_Test.variables)
# Get the size of the "T0" variable
print(nc_Test.variables["T0"].size)
# Access attributes associated with the NetCDF file
print(nc_Test.__dict__)
# Retrieve the entire "T0" variable
t0_variable = nc_Test.variables["T0"][:]
print("T0 variable (whole):", t0_variable)
# Retrieve a subset of the "T0" variable
# This subset starts at position (0, 0, 0) and has a count of (2, 3, 1) along each dimension
print(t0_variable[0:2, 0:3, 0:1])
# Access attributes associated with the "T0" variable
print(nc_Test.variables["T0"].__dict__)
# Close the NetCDF file
nc_Test.close()
from netCDF4 import Dataset
# Define the NetCDF file path
fn_NetCDF = "C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc"
# Open the NetCDF file
nc_Test = Dataset(fn_NetCDF, "r")
# Access the dimensions
print(nc_Test.dimensions)
# Access the variables and get their names
print(nc_Test.variables)
# Get the size of the "T0" variable
print(nc_Test.variables["T0"].size)
# Access attributes associated with the NetCDF file
print(nc_Test.__dict__)
# Retrieve the entire "T0" variable
t0_variable = nc_Test.variables["T0"][:]
print("T0 variable (whole):", t0_variable)
# Retrieve a subset of the "T0" variable
# This subset starts at position (0, 0, 0) and has a count of (2, 3, 1) along each dimension
print(t0_variable[0:2, 0:3, 0:1])
# Access attributes associated with the "T0" variable
print(nc_Test.variables["T0"].__dict__)
# Close the NetCDF file
nc_Test.close()
quit
reticulate::py_last_error()
reticulate::repl_python()
import netCDF4
from netCDF4 import Dataset
import numpy as np
# Define dimension metadata
lon_values = np.arange(11.72, 11.8, 0.01)
lat_values = np.arange(50.08, 50.14, 0.01)
time_values = np.arange(1, 4)
# Create a NetCDF file
nc_Create = Dataset("C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc", "w")
# Define dimensions
nc_Create.createDimension("longitude", len(lon_values))
nc_Create.createDimension("latitude", len(lat_values))
nc_Create.createDimension("time", None)  # Use None for unlimited dimension
# Define variables
var_T0 = nc_Create.createVariable("T0", "f4", ("latitude", "longitude", "time"))
var_T0.units = "cel"
var_T0.missing_value = -9999
var_crs = nc_Create.createVariable("crs", "S1", ())  # Create an empty variable
var_crs = nc_Create.createVariable("crs", "S1", (""))  # Create an empty variable
var_crs = nc_Create.createVariable("crs", "S1", ())  # Create an empty variable
var_crs = nc_Create.createVariable("crs", "S1", ())  # Create an empty variable
var_crs.long_name = "coordinate reference system"
var_crs.EPSG = "EPSG:4236"
# Add data to the "T0" variable (random data)
var_T0[:] = np.random.rand(len(lat_values), len(lon_values), len(time_values))
# Add global attributes
nc_Create.title = "Multidimensional data example"
nc_Create.author = "Kan, Lei, kan.lei@ruhr-uni-bochum.de"
# Close the NetCDF file
nc_Create.close()
from netCDF4 import Dataset
import numpy as np
# Define dimension metadata
lon_values = np.arange(11.72, 11.8, 0.01)
lat_values = np.arange(50.08, 50.14, 0.01)
time_values = np.arange(1, 4)
# Create a NetCDF file
nc_Create = Dataset("C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc", "w")
# Define dimensions
nc_Create.createDimension("longitude", len(lon_values))
nc_Create.createDimension("latitude", len(lat_values))
nc_Create.createDimension("time", None)  # Use None for unlimited dimension
# Define variables
var_T0 = nc_Create.createVariable("T0", "f4", ("latitude", "longitude", "time"))
var_T0.units = "cel"
var_T0.missing_value = -9999
var_crs = nc_Create.createVariable("crs", "S1")  # Create an empty variable
var_crs = nc_Create.createVariable("crs", "c")  # Create an empty variable
var_crs.long_name = "coordinate reference system"
var_crs.EPSG = "EPSG:4236"
# Add data to the "T0" variable (random data)
var_T0[:] = np.random.rand(len(lat_values), len(lon_values), len(time_values))
# Add global attributes
nc_Create.title = "Multidimensional data example"
nc_Create.author = "Kan, Lei, kan.lei@ruhr-uni-bochum.de"
# Close the NetCDF file
nc_Create.close()
from netCDF4 import Dataset, stringtochar
import numpy as np
# Define dimension metadata
lon_values = np.arange(11.72, 11.8, 0.01)
lat_values = np.arange(50.08, 50.14, 0.01)
time_values = np.arange(1, 4)
# Create a NetCDF file
nc_Create = Dataset("C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc", "w")
# Define dimensions
nc_Create.createDimension("longitude", len(lon_values))
nc_Create.createDimension("latitude", len(lat_values))
nc_Create.createDimension("time", None)  # Use None for unlimited dimension
# Define variables
var_T0 = nc_Create.createVariable("T0", "f4", ("latitude", "longitude", "time"))
var_T0.units = "cel"
var_T0.missing_value = -9999
var_crs = nc_Create.createVariable("crs", "c")  # Create an empty variable
var_crs.long_name = "coordinate reference system"
var_crs.EPSG = "EPSG:4236"
# Add data to the "T0" variable (random data)
var_T0[:] = np.random.rand(len(lat_values), len(lon_values), len(time_values))
# Add global attributes
nc_Create.title = "Multidimensional data example"
nc_Create.author = "Kan, Lei, kan.lei@ruhr-uni-bochum.de"
# Close the NetCDF file
nc_Create.close()
var_crs = nc_Create.createVariable("crs", "S1")  # Create an empty variable
from netCDF4 import Dataset, stringtochar
import numpy as np
# Define dimension metadata
lon_values = np.arange(11.72, 11.8, 0.01)
lat_values = np.arange(50.08, 50.14, 0.01)
time_values = np.arange(1, 4)
# Create a NetCDF file
nc_Create = Dataset("C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc", "w")
# Define dimensions
nc_Create.createDimension("longitude", len(lon_values))
nc_Create.createDimension("latitude", len(lat_values))
nc_Create.createDimension("time", None)  # Use None for unlimited dimension
# Define variables
var_T0 = nc_Create.createVariable("T0", "f4", ("latitude", "longitude", "time"))
var_T0.units = "cel"
var_T0.missing_value = -9999
var_crs = nc_Create.createVariable("crs", "S1", ())  # Create an empty variable
var_crs.long_name = "coordinate reference system"
var_crs.EPSG = "EPSG:4236"
# Add data to the "T0" variable (random data)
var_T0[:] = np.random.rand(len(lat_values), len(lon_values), len(time_values))
# Add global attributes
nc_Create.title = "Multidimensional data example"
nc_Create.author = "Kan, Lei, kan.lei@ruhr-uni-bochum.de"
# Close the NetCDF file
nc_Create.close()
quit
library(ncdf4)
library(tidyverse)
# Define the NetCDF file path
fn_NetCDF <- "C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc"
# Open the NetCDF file
nc_Test <- nc_open(fn_NetCDF)
# Access the dimensions
# nc_Test$dim
nc_Test$dim |> names()
# Access the variables
# nc_Test$var
nc_Test$var |> names()
nc_Test$var$T0$size
# Access attributes
ncatt_get(nc_Test, 0)
# Retrieve the variable "T0" WHOLE
ncvar_get(nc_Test, "T0")
# Retrieve a subset of the variable "T0"
# This subset starts at position (1, 1, 1) and has a count of (2, 3, 1) along each dimension
ncvar_get(nc_Test, "T0", start = c(1, 1, 1), count = c(2, 3, 1))
# Retrieve attributes associated with the variable "T0"
ncatt_get(nc_Test, "T0")
ncvar_get(nc_Test, "longitude")
nc_close(nc_Test)
reticulate::repl_python()
# Create a NetCDF file
nc_Create = Dataset("C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc", "w")
quit
# Define dimension metadata
dim_lon <- ncdim_def("longitude", "degrees_east",
seq(11.72, 11.79, 0.01),
longname = "longitude")
dim_lat <- ncdim_def("latitude", "degrees_north",
seq(50.08, 50.13, 0.01),
longname = "latitude")
dim_time <- ncdim_def("time", "day since 1961-01-01 00:00:00 +00",
1:3, unlim=TRUE,
longname = "time")
# Define a variable named "T0" with the units "cel" and dimensions dim_lat, dim_lon, and dim_time.
# The missing value for this variable is set to -9999.
var_T0 <- ncvar_def("T0", "cel", list(dim_lat, dim_lon, dim_time), -9999)
# Define a variable named "crs" with no units and no dimensions (empty list).
# This variable is defined as NULL initially.
var_crs <- ncvar_def("crs", "", list(), NULL)
# Combine variables into a list
vars <- list(var_T0, var_crs)
nc_Create <- nc_create("C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc", vars)
nc_Create <- nc_create("C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc", vars)
