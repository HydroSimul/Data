library(readxl)
fn_Pegeln <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Pegeln_NRW.xlsx"
#
tb_Pegeln <- read_excel(fn_Pegeln)
# The Excel file cannot be read directly from GitHub. You will need to download it to your local machine first
fn_Pegeln <- "C:\\Lei\\HS_Web\\data_share/Pegeln_NRW.xlsx"
#
tb_Pegeln <- read_excel(fn_Pegeln)
tb_Pegeln
# using the range argument
tb_Pegeln_Range <- read_excel(fn_Pegeln, range = "Suchergebnisse Pegel!A5:P10")
tb_Pegeln_Range
# 1. load
tb_Read <- read_csv2(fn_Bachum, skip = 10, n_max = 10, col_names = FALSE)
# load the library
library(tidyverse)
fn_Bachum <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv"
# 1. load
tb_Read <- read_csv2(fn_Bachum, skip = 10, n_max = 10, col_names = FALSE)
tb_Read
# 2. convert
df_Read <- as.data.frame(tb_Read)
mat_Read <- as.matrix(tb_Read)
df_Read
mat_Read
reticulate::repl_python()
# load the library
import pandas as pd
fn_Bachum = "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv"
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';')
# Display the loaded data
print(tb_Read)
# 2. Convert to a DataFrame and a NumPy matrix
df_Read = pd.DataFrame(tb_Read)
mat_Read = df_Read.to_numpy()
# Display the converted DataFrame and matrix
print(df_Read)
print(mat_Read)
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';')
# load the library
import pandas as pd
fn_Bachum = "C:\Lei\HS_Web\data_share/Bachum_2763190000100.csv"
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';')
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';')
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, delimiter=';', encoding='latin-1')
tb_Read
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, delimiter=';', decimal=',', encoding='latin-1')
print(tb_Read)
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';', decimal=',', encoding='latin-1')
print(tb_Read)
df_bach = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', encoding='latin-1')
print(df)
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';', decimal=',', encoding='latin-1')
print(tb_Read)
# load the library
import pandas as pd
fn_Bachum_py = "C:\Lei\HS_Web\data_share/Bachum_2763190000100.csv"
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';', decimal=',', encoding='latin-1')
print(tb_Read)
df_bach = pd.read_csv(fn_Bachum_py, skiprows=3, nrows=2, header=None, delimiter=';', encoding='latin-1')
print(df)
df_bach = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', encoding='latin-1')
print(df_bach)
# load the library
import pandas as pd
fn_Bachum = "C:\Lei\HS_Web\data_share/Bachum_2763190000100.csv"
df_Date = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';')
# Display the loaded data
print(df_Date)
# 2. Convert the second column (X2) to a date format
df_Date[1] = pd.to_datetime(df_Date[1], format='%d.%m.%Y')
# Display the DataFrame with the second column converted to date format
print(df_Date)
df_Date = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', encoding='latin-1')
# Display the loaded data
print(df_Date)
# 2. Convert the second column (X2) to a date format
df_Date[1] = pd.to_datetime(df_Date[1], format='%d.%m.%Y')
# Display the DataFrame with the second column converted to date format
print(df_Date)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": pd.to_datetime}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
col_types = {"X1": str, "X2": pd.to_datetime}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
col_types = {"X1": str, "X2": 'datetime'}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
quit
# skip = 10
read_csv2(fn_Bachum, skip = 3, n_max = 2, col_names = FALSE, col_types = "cD")
reticulate::repl_python()
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
quit
# skip = 10
read_csv2(fn_Bachum, skip = 3, n_max = 2, col_names = FALSE, col_types = "cD")
reticulate::repl_python()
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": str}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
col_types = {"X1": str, "X2": datetime64[ns]}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64[ns]}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
col_types = {"X1": str, "X2": datetime64[ns]}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": 'datetime64[ns]'}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64[ns]}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64[ns]}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
col_types = {"X1": str, "X2": datetime64[ns]}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
col_types = {"X1": str, "X2": timedelta64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
#| eval: false
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": datetime64}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
#| eval: false
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": float}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
#| eval: false
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": str}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": pd.to_datetime}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
# Define column names and types as a dictionary
col_types = {"X1": str, "X2": str}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# Display the loaded data
print(df)
col_types = {"X1": str, "X2": pd.to_datetime}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# load the library
import pandas as pd
fn_Bachum = "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv"
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';', decimal=',', encoding='latin-1')
print(tb_Read)
quit
fn_Datatype <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype)
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "id??Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype)
fn_Datatype <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
read_table(fn_Datatype)
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(text = "2023-1-1")
fn_Datatype <- "C:\\Lei\\HS_Web\\data_share/load_Datatype.txt"
read_table(fn_Datatype)
read_table(fn_Datatype)
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "iddDDc")
fn_Datatype <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
read_table(fn_Datatype)
reticulate::repl_python()
fn_Datatype = "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
df = pd.read_table(fn_Datatype)
print(df)
df = pd.read_table(fn_Datatype)
print(df)
print(type(df))
print(df.dtypes)
