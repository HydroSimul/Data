# Display the loaded data
print(df)
col_types = {"X1": str, "X2": pd.to_datetime}
# Read the CSV file, skip 3 rows, read 2 rows, and specify column names and types
df = pd.read_csv(fn_Bachum, skiprows=3, nrows=2, header=None, delimiter=';', names=["X1", "X2"], dtype=col_types, encoding='latin-1')
# load the library
import pandas as pd
fn_Bachum = "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv"
tb_Read = pd.read_csv(fn_Bachum, skiprows=10, nrows=10, header=None, delimiter=';', decimal=',', encoding='latin-1')
print(tb_Read)
quit
fn_Datatype <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype)
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "id??Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype)
fn_Datatype <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
read_table(fn_Datatype)
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "idd?Dc")
read_table(text = "2023-1-1")
fn_Datatype <- "C:\\Lei\\HS_Web\\data_share/load_Datatype.txt"
read_table(fn_Datatype)
read_table(fn_Datatype)
read_table(fn_Datatype, col_types = "iddDDc")
read_table(fn_Datatype, col_types = "iddDDc")
fn_Datatype <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
read_table(fn_Datatype)
reticulate::repl_python()
fn_Datatype = "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/load_Datatype.txt"
df = pd.read_table(fn_Datatype)
print(df)
df = pd.read_table(fn_Datatype)
print(df)
print(type(df))
print(df.dtypes)
library(ncdf4)
library(tidyverse)
fn_NetCDF <- "C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc"
nc_Test <- nc_open(fn_NetCDF)
nc_Test
nc_close(nc_Test)
library(ncdf4)
library(tidyverse)
fn_NetCDF <- "C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc"
nc_Test <- nc_open(fn_NetCDF)
nc_Test
nc_close(nc_Test)
nc_Test$var
nc_Test$dim
nc_Test$natts
nc_Test
print(nc_Test)
cat(nc_Test)
str(nc_Test)
nc_Test$dim
ncatt_get(nc_Test, 0)
ncatt_get(nc_Test, 0)
nc_close(nc_Test)
nc_Test <- nc_open(fn_NetCDF)
nc_Test$dim
nc_Test$var
ncatt_get(nc_Test, 0)
# Access the variables
nc_Test$var
ncvar_get(nc_Test, "T0", start = c(1,1,1),  count = c(2,3,4))
# Access attributes
ncatt_get(nc_Test, 0)
# Access the variables
nc_Test$var
ncvar_get(nc_Test, "T0", start = c(1,1,1),  count = c(2,3,2))
# Access the dimensions
nc_Test$dim
# Access the variables
nc_Test$var
# Access attributes
ncatt_get(nc_Test, 0)
ncvar_get(nc_Test, "T0", start = c(1,1,1))
ncatt_get(nc_Test, "T0")
ncvar_get(nc_Test, "T0", start = c(1,1), count = c(2,3))
ncvar_get(nc_Test, "T0", start = c(1,1), count = c(2,3, 1))
ncvar_get(nc_Test, "T0", start = c(1,1, 1), count = c(2,3, 1))
ncatt_get(nc_Test, "T0")
ncvar_get(nc_Test, "T0")
ncvar_get(nc_Test, "T0", start = c(1, 1, 1), count = c(2, 3, 1))
ncatt_get(nc_Test, "T0")
# Access the dimensions
nc_Test$dim |> names()
# Access the variables
nc_Test$var |> names()
ncatt_get(nc_Test, "T0")
# Access the dimensions
nc_Test$dim |> names()
ncatt_get(nc_Test, "time")
ncatt_get(nc_Test, "altitude")
# Access the dimensions
nc_Test$dim |> names()
ncatt_get(nc_Test, "latitude")
ncdim_len(nc_Test, "latitude")
ncdim_len(nc_Test, "latitude")
nc_Test$var$T0$size
seq(11.72, 11.79, 0.01)
seq(50.08, 50.13, 0.01)
runif(6*8*3)
library(ncdf4)
library(tidyverse)
fn_NetCDF <- "C:\\Lei\\HS_Web\\data_share\\minibeispiel_NetCDF.nc"
nc_Test <- nc_open(fn_NetCDF)
# Access the dimensions
# nc_Test$dim
nc_Test$dim |> names()
# Access the variables
# nc_Test$var
nc_Test$var |> names()
nc_Test$var$T0$size
# Access attributes
ncatt_get(nc_Test, 0)
# Retrieve the variable "T0" WHOLE
ncvar_get(nc_Test, "T0")
# Retrieve a subset of the variable "T0"
# This subset starts at position (1, 1, 1) and has a count of (2, 3, 1) along each dimension
ncvar_get(nc_Test, "T0", start = c(1, 1, 1), count = c(2, 3, 1))
# Retrieve attributes associated with the variable "T0"
ncatt_get(nc_Test, "T0")
nc_close(nc_Test)
dim_lon <- ncdim_def("longitude", "degrees_east",
seq(11.72, 11.79, 0.01),
longname = "longitude")
dim_lat <- ncdim_def("latitude", "degrees_north",
seq(50.08, 50.13, 0.01),
longname = "latitude")
dim_time <- ncdim_def("time", "day since 1961-01-01 00:00:00 +00",
1:3, unlim=TRUE,
longname = "time")
# Define a variable named "T0" with the units "cel" and dimensions dim_lat, dim_lon, and dim_time.
# The missing value for this variable is set to -9999.
var_T0 <- ncvar_def("T0", "cel", list(dim_lat, dim_lon, dim_time), -9999)
# Define a variable named "crs" with no units and no dimensions (empty list).
# This variable is defined as NULL initially.
var_crs <- ncvar_def("crs", "", list(), NULL)
# Combine variables into a list
vars <- list(var_T0, var_crs)
nc_Create <- nc_create("export_Text.nc", vars)
ncvar_put(nc_Create, var_T0, runif(6*8*3))
# Add the "long_name" and "EPSG" attributes to the variable "var_crs"
ncatt_put(nc_Create, var_crs, "long_name", "coordinate reference system")
ncatt_put(nc_Create, var_crs, "EPSG", "EPSG:4236")
# Add the "title" and "author" global attributes to the NetCDF file
ncatt_put(nc_Create, 0, "title", "Multidimensional data example")
ncatt_put(nc_Create, 0, "author", "Kan, Lei, kan.lei@ruhr-uni-bochum.de")
nc_close(nc_Create)
dim_lon <- ncdim_def("longitude", "degrees_east",
seq(11.72, 11.79, 0.01),
longname = "longitude")
dim_lat <- ncdim_def("latitude", "degrees_north",
seq(50.08, 50.13, 0.01),
longname = "latitude")
dim_time <- ncdim_def("time", "day since 1961-01-01 00:00:00 +00",
1:3, unlim=TRUE,
longname = "time")
# Define a variable named "T0" with the units "cel" and dimensions dim_lat, dim_lon, and dim_time.
# The missing value for this variable is set to -9999.
var_T0 <- ncvar_def("T0", "cel", list(dim_lat, dim_lon, dim_time), -9999)
# Define a variable named "crs" with no units and no dimensions (empty list).
# This variable is defined as NULL initially.
var_crs <- ncvar_def("crs", "", list(), NULL)
# Combine variables into a list
vars <- list(var_T0, var_crs)
nc_Create <- nc_create("C:\\Lei\\HS_Web\\data_share\\export_Text.nc", vars)
ncvar_put(nc_Create, var_T0, runif(6*8*3))
# Add the "long_name" and "EPSG" attributes to the variable "var_crs"
ncatt_put(nc_Create, var_crs, "long_name", "coordinate reference system")
ncatt_put(nc_Create, var_crs, "EPSG", "EPSG:4236")
# Add the "title" and "author" global attributes to the NetCDF file
ncatt_put(nc_Create, 0, "title", "Multidimensional data example")
ncatt_put(nc_Create, 0, "author", "Kan, Lei, kan.lei@ruhr-uni-bochum.de")
nc_close(nc_Create)
install.packages("rsvg")
rsvg::rsvg_png("file:///C:/Users/lei/Downloads/3 20Extreme_events_effect_on_TP_radar_plot.svg", "file:///C:/Users/lei/Downloads/3 20Extreme_events_effect_on_TP_radar_plot.png")
rsvg::rsvg_png("C:/Users/lei/Downloads/3 20Extreme_events_effect_on_TP_radar_plot.svg", "C:/Users/lei/Downloads/3 20Extreme_events_effect_on_TP_radar_plot.png")
rsvg::rsvg_png("C:\\Users\\lei\\Downloads\\3 20Extreme_events_effect_on_TP_radar_plot.svg", "C:\\Users\\lei\\Downloads\\3 20Extreme_events_effect_on_TP_radar_plot.png")
rsvg::rsvg_png("C:\\Users\\lei\\Downloads\\Extreme_events_effect_on_TP_radar_plot.svg", "C:\\Users\\lei\\Downloads\\Extreme_events_effect_on_TP_radar_plot.png")
vignette("xts")
library(xts)
library(tidyverse)
library(xts)
library(tidyverse)
fn_Bachum <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv"
fn_Oeventrop <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Oeventrop_2761759000100.csv"
fn_Villigst <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Villigst_2765590000100.csv"
df_Bachum <- read_csv2(fn_Bachum, skip = 10, col_names = FALSE)
View(df_Bachum)
df_Bachum <- read_csv2(fn_Bachum, skip = 10, col_names = FALSE)
df_Oeventrop <- read_csv2(fn_Oeventrop, skip = 10, col_names = FALSE)
df_Villigst <- read_csv2(fn_Villigst, skip = 10, col_names = FALSE)
View(df_Villigst)
xts_Bachum <- xts(df_Bachum)
df_Bachum$X1 <- as_date(df_Bachum$X1, format = "%d.%m.%y")
View(df_Bachum)
as_date("01.04.1996", format = "%d.%m.%Y")
df_Bachum <- read_csv2(fn_Bachum, skip = 10, col_names = FALSE)
df_Bachum$X1 <- as_date(df_Bachum$X1, format = "%d.%m.%Y")
View(df_Bachum)
xts_Bachum <- xts(df_Bachum)
xts_Bachum <- xts(df_Bachum, by = "X1")
xts_Bachum <- xts(df_Bachum, order.by = "X1")
xts_Bachum <- xts(df_Bachum, order.by = df_Bachum$X1)
View(xts_Bachum)
install.packages("timetk")
library(timetk)
ts_Year <- summarise_by_time(df_Bachum, "x1", .by = "year")
ts_Year <- summarise_by_time(df_Bachum, "X1", .by = "year")
View(df_Bachum)
str(df_Bachum)
ts_Year <- summarise_by_time(df_Bachum, "X1")
xts_Bachum <- xts(df_Bachum$X2, order.by = df_Bachum$X1)
ts_Year <- summarise_by_time(xts_Bachum, .by = "year")
df_Villigst$X1 <- as_date(df_Villigst$X1, format = "%d.%m.%Y")
xts_Villigst <- as.xts(df_Villigst)
View(xts_Villigst)
xts_Rhur <- merge(xts_Bachum, xts_Villigst)
View(xts_Rhur)
names(xts_Rhur)
length(xts_Bachum)
length(xts_Villigst)
ts_Inteval <- seq(as_date("1996-05-17"), as_date("1996-12-31"))
as_date("1996-05-17")
as_date("1996-12-31")
ts_Inteval <- seq(as_date("1996-05-17"), as_date("1996-12-31"), "days")
xts_Inteval <- xts_Rhur[ts_Inteval, ]
View(xts_Inteval)
xts_RollMean <- rollmean(xts_Inteval, 7)
View(xts_RollMean)
xts_Month <- apply.monthly(xts_Rhur, mean)
head(xts_RollMean, 10)
head(xts_Inteval, 10)
xts_Month
xts_Month <- apply.monthly(xts_Inteval, mean)
xts_Month
install.packages("momentsmoments")
install.packages("moments")
reticulate::py_install("scipy")
reticulate::repl_python()
import numpy as np
from scipy.stats import skew
# Sample dataset (replace with your data)
data = np.array([12, 15, 18, 22, 24, 28, 31, 35, 40, 45, 50])
# Calculate Mean
mean_value = np.mean(data)
# Calculate Median
median_value = np.median(data)
# Calculate Variance
variance_value = np.var(data, ddof=0)  # Set ddof to 0 for population variance
# Calculate Standard Deviation
std_deviation_value = np.std(data, ddof=0)  # Set ddof to 0 for population standard deviation
# Calculate Quantiles (25th, 50th, and 75th percentiles)
quantiles_values = np.percentile(data, [25, 50, 75])
# Calculate Skewness
skewness_value = skew(data)
print("Mean:", mean_value)
print("Median:", median_value)
print("Variance:", variance_value)
print("Standard Deviation:", std_deviation_value)
print("Quantiles (25th, 50th, 75th percentiles):", quantiles_values)
print("Skewness:", skewness_value)
import numpy as np
from scipy.stats import skew
reticulate::py_install("scipy")
R
quit
cat("Skewness:", skewness_value, "\n")
reticulate::py_install("scipy")
reticulate::repl_python()
from scipy.stats import skew
from scipy import skew
from scipy import skew
from scipy.stats import skew
quit
cat("Quantiles (25th, 50th, 75th percentiles):", quantiles_values, "\n")
library(moments)
# Sample dataset (replace with your data)
data <- c(12, 15, 18, 22, 24, 28, 31, 35, 40, 45, 50)
# Calculate Mean
mean_value <- mean(data)
# Calculate Median
median_value <- median(data)
# Calculate Variance
variance_value <- var(data)
# Calculate Standard Deviation
std_deviation_value <- sd(data)
# Calculate Quantiles (25th, 50th, and 75th percentiles)
quantiles_values <- quantile(data, probs = c(0.25, 0.5, 0.75))
# Calculate Skewness
skewness_value <- moments::skewness(data)
# Print the results
cat("Mean:", mean_value, "\n")
cat("Median:", median_value, "\n")
cat("Variance:", variance_value, "\n")
cat("Standard Deviation:", std_deviation_value, "\n")
cat("Quantiles (25th, 50th, 75th percentiles):", quantiles_values, "\n")
cat("50th Percentile (Q2):", quantiles_values["50%"], "\n")
cat("75th Percentile (Q3):", quantiles_values["75%"], "\n")
cat("Skewness:", skewness_value, "\n")
# Library
library(xts)
library(tidyverse)
theme_set(theme_bw())
# File name
fn_Bachum <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv"
fn_Oeventrop <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Oeventrop_2761759000100.csv"
fn_Villigst <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Villigst_2765590000100.csv"
# Load Data
df_Bachum <- read_csv2(fn_Bachum, skip = 10, col_names = FALSE)
df_Oeventrop <- read_csv2(fn_Oeventrop, skip = 10, col_names = FALSE)
df_Villigst <- read_csv2(fn_Villigst, skip = 10, col_names = FALSE)
# Convert Date column to a Date type
df_Bachum$X1 <- as_date(df_Bachum$X1, format = "%d.%m.%Y")
df_Oeventrop$X1 <- as_date(df_Oeventrop$X1, format = "%d.%m.%Y")
df_Villigst$X1 <- as_date(df_Villigst$X1, format = "%d.%m.%Y")
# Create an xts object
xts_Bachum <- as.xts(df_Bachum)
xts_Oeventrop <- as.xts(df_Oeventrop)
xts_Villigst <- as.xts(df_Villigst)
xts_Rhur <- merge(xts_Bachum, xts_Oeventrop, xts_Villigst)
names(xts_Rhur) <- c("Bachum", "Oeventrop", "Villigst")
View(xts_Rhur)
xts_Rhur <- xts_Rhur[seq(as_date("1991-01-01"), as_date("2020-12-31"), "days"), ]
gdf_Ruhr <- reshape2::melt(xts_Rhur)
View(gdf_Ruhr)
gdf_Ruhr <- reshape2::melt(xts_Rhur |> as.data.frame())
a <- xts_Rhur |> as.data.frame()
View(a)
gdf_Ruhr <- reshape2::melt(data.frame(date=index(xts_Rhur), coredata(xts_Rhur)))
a <- data.frame(date=index(xts_Rhur), coredata(xts_Rhur))
View(a)
gdf_Ruhr <- reshape2::melt(data.frame(date=index(xts_Rhur), coredata(xts_Rhur)), "date")
View(gdf_Ruhr)
ggplot(gdf_Ruhr) +
geom_line(aes(date, value, color = variable))
xts_Rhur[xts_Rhur < 0]
xts_Rhur < 0
which(xts_Rhur < 0)
# Deal with negative
xts_Rhur[which(xts_Rhur < 0)] <- NA
xts_Rhur[which(xts_Rhur < 0)]
replace(xts_Rhur, [which(xts_Rhur < 0)], NA)
replace(xts_Rhur, which(xts_Rhur < 0), NA)
xts_Rhur[1]
# Deal with negative
df_Ruhr <- coredata(xts_Rhur)
df_Ruhr[df_Ruhr < 0] <- NA
gdf_Ruhr <- reshape2::melt(data.frame(date=index(xts_Rhur), df_Ruhr), "date")
View(gdf_Ruhr)
ggplot(gdf_Ruhr) +
geom_line(aes(date, value, color = variable))
ggplot(gdf_Ruhr) +
geom_line(aes(date, value, color = variable)) +
labs(x = "Date", y = "Discharge [m^3/s]", color = "Gauge")
library(plotly)
gg_TS_Ruhr <- ggplot(gdf_Ruhr) +
geom_line(aes(date, value, color = variable)) +
labs(x = "Date", y = "Discharge [m^3/s]", color = "Gauge")
plotly(gg_TS_Ruhr)
gg_TS_Ruhr <- ggplot(gdf_Ruhr) +
geom_line(aes(date, value, color = variable)) +
labs(x = "Date", y = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_TS_Ruhr)
gg_Hist_Ruhr <- ggplot(gdf_Ruhr) +
geom_histogram(aes(value, group = variable, color = variable)) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Hist_Ruhr)
gg_Hist_Ruhr <- ggplot(gdf_Ruhr) +
geom_histogram(aes(value, group = variable, color = variable), position = "dodge") +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Hist_Ruhr)
gg_Hist_Ruhr <- ggplot(gdf_Ruhr) +
geom_histogram(aes(value, group = variable, fill = variable, color = variable), position = "dodge", alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Hist_Ruhr)
gg_Freq_Ruhr <- ggplot(gdf_Ruhr) +
geom_freqpoly(aes(value, group = variable, fill = variable, color = variable), alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Freq_Ruhr)
gg_Freq_Ruhr <- ggplot(gdf_Ruhr) +
geom_freqpoly(aes(value, group = variable, fill = variable, color = variable), stat = "count") +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Freq_Ruhr)
gg_Freq_Ruhr <- ggplot(gdf_Ruhr) +
geom_freqpoly(aes(value, group = variable, fill = variable, color = variable)) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Freq_Ruhr)
gg_Hist_Ruhr <- ggplot(df_Bachum) +
geom_histogram(aes(X2), position = "dodge", alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Hist_Ruhr)
gg_Hist_Ruhr <- ggplot(gdf_Ruhr) +
geom_histogram(aes(value, group = variable, fill = variable, color = variable), position = "dodge", alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Hist_Ruhr)
gg_Freq_Ruhr <- ggplot(gdf_Ruhr) +
geom_freqpoly(aes(value, group = variable, fill = variable, color = variable)) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Freq_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_histogram(aes(value, group = variable, fill = variable, color = variable), position = "dodge", alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Box_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_boxplot(aes(value, group = variable, fill = variable, color = variable), position = "dodge", alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Box_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_boxplot(aes(value, group = variable, fill = variable, color = variable), alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Box_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_boxplot(aes(value), alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Box_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_boxplot(aes(group = variable, fill = variable, color = variable), alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Box_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_boxplot(aes(variable, value, fill = variable, color = variable), alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Box_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_boxplot(aes(variable, value, fill = variable, color = variable), alpha = .5) +
labs(x = "Gauge", y = "Discharge [m^3/s]", color = "Gauge") +
theme(legend.position = "none")
ggplotly(gg_Box_Ruhr)
gg_Freq_Ruhr <- ggplot(gdf_Ruhr) +
geom_freqpoly(aes(value, variable, fill = variable, color = variable)) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Freq_Ruhr)
gg_QQ_Ruhr <- ggplot(gdf_Ruhr) +
geom_qq(aes(value, color = variable), alpha = .5) +
labs(x = "Gauge", y = "Discharge [m^3/s]", color = "Gauge") +
theme(legend.position = "none")
ggplotly(gg_QQ_Ruhr)
gg_QQ_Ruhr <- ggplot(gdf_Ruhr) +
geom_qq(aes(sample = value, color = variable), alpha = .5) +
labs(x = "Gauge", y = "Discharge [m^3/s]", color = "Gauge") +
theme(legend.position = "none")
ggplotly(gg_QQ_Ruhr)
gg_QQ_Ruhr <- ggplot(gdf_Ruhr) +
geom_qq(aes(sample = value, color = variable), alpha = .5) +
geom_qq_line(aes(sample = value, color = variable)) +
labs(x = "Gauge", y = "Discharge [m^3/s]", color = "Gauge") +
theme(legend.position = "none")
ggplotly(gg_QQ_Ruhr)
xts_Ruhr_Clean <- xts(df_Ruhr, index(xts_Rhur))
df_Ruhr_Month <- apply.monthly(xts_Ruhr_Clean, mean)
gdf_Ruhr <- reshape2::melt(data.frame(date=index(df_Ruhr_Month), df_Ruhr_Month), "date")
gg_TS_Ruhr <- ggplot(gdf_Ruhr) +
geom_line(aes(date, value, color = variable)) +
labs(x = "Date", y = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_TS_Ruhr)
gg_Hist_Ruhr <- ggplot(gdf_Ruhr) +
geom_histogram(aes(value, group = variable, fill = variable, color = variable), position = "dodge", alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Hist_Ruhr)
5/0.618
sqrt(3)/2
sqrt(3)/2 * 1.6
gg_Hist_Ruhr <- ggplot(gdf_Ruhr) +
geom_histogram(aes(value, group = variable, fill = variable, color = variable), position = "dodge", alpha = .5) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge", fill = "Gauge")
ggplotly(gg_Hist_Ruhr)
gg_QQ_Ruhr <- ggplot(gdf_Ruhr) +
geom_qq(aes(sample = value, color = variable), alpha = .5) +
# geom_qq_line(aes(sample = value, color = variable)) +
labs(x = "Gauge", y = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_QQ_Ruhr)
gg_QQ_Ruhr <- ggplot(gdf_Ruhr) +
geom_qq(aes(sample = value, color = variable), alpha = .5) +
geom_qq_line(aes(sample = value, color = variable)) +
labs(x = "", y = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_QQ_Ruhr)
gg_Box_Ruhr <- ggplot(gdf_Ruhr) +
geom_boxplot(aes(variable, value, fill = variable, color = variable), alpha = .5) +
labs(x = "Gauge", y = "Discharge [m^3/s]", color = "Gauge") +
theme(legend.position = "none")
ggplotly(gg_Box_Ruhr)
gg_Freq_Ruhr <- ggplot(gdf_Ruhr) +
geom_freqpoly(aes(value, group = variable, fill = variable, color = variable)) +
labs(y = "Frequency", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Freq_Ruhr)
gg_Freq_Ruhr <- ggplot(gdf_Ruhr) +
geom_freqpoly(aes(value, y = after_stat(count / sum(count)), group = variable, fill = variable, color = variable)) +
labs(y = "Count", x = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_Freq_Ruhr)
gg_QQ_Ruhr <- ggplot(gdf_Ruhr) +
geom_qq(aes(sample = value, color = variable), alpha = .5, distribution = stats::qunif) +
geom_qq_line(aes(sample = value, color = variable)) +
labs(x = "", y = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_QQ_Ruhr)
gg_QQ_Ruhr <- ggplot(gdf_Ruhr, aes(sample = value, color = variable)) +
geom_qq(alpha = .5, distribution = stats::qunif) +
geom_qq_line(distribution = stats::qunif) +
labs(x = "", y = "Discharge [m^3/s]", color = "Gauge")
ggplotly(gg_QQ_Ruhr)
