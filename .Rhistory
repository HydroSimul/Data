# New CRS
crs_New <- "EPSG:4326"
# Reproject
vect_Test_New <- project(vect_Test, crs_New)
# Info of vector layer
vect_Test_New
reticulate::repl_python()
crs_New = "EPSG:4326"
# Reproject the vector layer to the new CRS
vect_Test_New = vect_Test.to_crs(crs=crs_New)
# Info of vector layer
print(vect_Test_New)
quit
# New CRS
crs_New <- "EPSG:4326"
# Reproject
rast_Test_New <- project(rast_Test, crs_New, method = 'near')
# Info and Plot of vector layer
rast_Test_New
#| layout-ncol: 2
#| fig-cap:
#|   - "Original"
#|   - "New"
plot(rast_Test)
plot(rast_Test_New)
reticulate::repl_python()
# Define the new CRS
new_crs = {'init': 'EPSG:4326'}
transform, width, height = calculate_default_transform(
rast_Test.crs, new_crs, rast_Test.width, rast_Test.height, *rast_Test.bounds)
kwargs = rast_Test.meta.copy()
kwargs.update({
'crs': new_crs,
'transform': transform,
'width': width,
'height': height
})
rast_Test_New = rasterio.open('C:\\Lei\\HS_Web\\data_share/minibeispiel_raster.tif', 'w', **kwargs)
reproject(
source=rasterio.band(rast_Test, 1),
destination=rasterio.band(rast_Test_New, 1),
#src_transform=rast_Test.transform,
src_crs=rast_Test.crs,
#dst_transform=transform,
dst_crs=new_crs,
resampling=Resampling.nearest)
rast_Test_New.close()
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc")
rast_plot(rast_Test)
rast_Test_New = rasterio.open('C:\\Lei\\HS_Web\\data_share/minibeispiel_raster.tif')
rast_plot(rast_Test_New)
quit
# New CRS
rast_Mask <- rast(ncol=10, nrow=10, xmin=265000, xmax=270000, ymin=5553000, ymax=5558000)
crs(rast_Mask) <- "EPSG:25833"
values(rast_Mask) <- 1
# Reproject
rast_Test_New <- project(rast_Test, rast_Mask)
# Info and Plot of vector layer
rast_Test_New
#| layout-ncol: 2
#| fig-cap:
#|   - "Original"
#|   - "New"
plot(rast_Test)
plot(rast_Test_New)
df_Attr <- as.data.frame(vect_Test)
df_Attr
vect_Test$ID_region
vect_Test[,"ID_region"]
vect_Test$New_Attr <- c("n1", "n2")
vect_Test[,"New_Attr"] <- c("n1", "n2")
df_New_Attr <- data.frame(Name = c("a", "b"), new_Attr2 = c(9, 6))
cbind(vect_Test, df_New_Attr)
merge(vect_Test, df_New_Attr, by = "Name")
vect_Test$New_Attr <- c("n1", "n2")
vect_Test[,"New_Attr"] <- c("n1", "n2")
# New Vect
# Define the coordinate reference system (CRS) with EPSG codes
crs_31468 <- "EPSG:31468"
# Define coordinates for the first polygon
x_polygon_3 <- c(4480400, 4481222, 4480500)
y_polygon_3 <- c(5551000, 5550666, 5552555)
geometry_polygon_3 <- cbind(id=3, part=1, x_polygon_3, y_polygon_3)
# Create a vector layer for the polygons, specifying their type, attributes, CRS, and additional attributes
vect_New <- vect(geometry_polygon_3, type="polygons", atts = data.frame(ID_region = 3, Name = c("b")), crs = crs_31468)
vect_New$region_area <- expanse(vect_New)
# Append the objects
vect_Append <- rbind(vect_Test, vect_New)
vect_Append
reticulate::repl_python()
# Define the coordinate reference system (CRS) with EPSG code
crs_31468 = "EPSG:31468"
# Define coordinates for the new polygon
x_polygon_3 = [4480400, 4481222, 4480500]
y_polygon_3 = [5551000, 5550666, 5552555]
# Create a Polygon geometry
geometry_polygon_3 = Polygon(zip(x_polygon_3, y_polygon_3))
# Create a GeoDataFrame for the new polygon
vect_New = gpd.GeoDataFrame({'ID_region': [3], 'Name': ['b'], 'geometry': [geometry_polygon_3]}, crs=crs_31468)
# Calculate the region area
vect_New['region_area'] = vect_New['geometry'].area
# Append the new GeoDataFrame to the existing one
vect_Append = gpd.GeoDataFrame(pd.concat([vect_Test, vect_New], ignore_index=True), crs=crs_31468)
# Now, vect_Append contains the combined data
print(vect_Append)
quit
# Aggregate by the "Name"
vect_Aggregated <- terra::aggregate(vect_Append, by = "Name")
vect_Aggregated
#| layout-ncol: 2
#| fig-cap:
#|   - "Original"
#|   - "Aggregated"
plot(vect_Append, "ID_region")
plot(vect_Aggregated, "Name")
reticulate::repl_python()
# Aggregate by the "Name"
vect_Aggregated = vect_Append.dissolve(by="Name", aggfunc="first")
print(vect_Aggregated)
vect_Test.plot()
plt.show()
plt.close()
vect_Aggregated.plot()
plt.show()
plt.close()
quit
vect_Overlap <- as.polygons(rast_Test)[1,]
names(vect_Overlap) <- "ID_Rast"
plot(vect_Overlap, "ID_Rast")
reticulate::repl_python()
with rasterio.open(rast_Test) as src:
image = src.read(1)
transform = src.transform
shapes = rasterio.features.shapes(image, transform=transform)
with rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc") as src:
image = src.read(1)
transform = src.transform
shapes = rasterio.features.shapes(image, transform=transform)
geometries = [shape(s) for s, v in shapes if v == 1]
geometries
vect_Overlap = gpd.GeoDataFrame({'geometry': geometries})
vect_Overlap
# Read the raster and get the shapes
with rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc") as src:
image = src.read(1)
transform = src.transform
shapes = rasterio.features.shapes(image, transform=transform)
# Convert the shapes to a GeoDataFrame
geometries = [shape(s) for s, v in shapes if v == 1]
vect_Overlap = gpd.GeoDataFrame({'geometry': geometries})
# Add an "ID_Rast" column to the GeoDataFrame
vect_Overlap['ID_Rast'] = range(1, len(geometries) + 1)
# Plot the polygons with "ID_Rast" as the attribute
vect_Overlap.plot(column='ID_Rast', cmap='jet', legend=True)
plt.show()
plt.close()
vect_Erase = gpd.overlay(vect_Test, vect_Overlap, how='difference')
# Read the raster and get the shapes
with rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc") as src:
rast_Test = src.read(1)
rast_Test.crs = CRS.from_epsg(31468)
transform = src.transform
shapes = rasterio.features.shapes(image, transform=transform)
# Convert the shapes to a GeoDataFrame
geometries = [shape(s) for s, v in shapes if v == 1]
vect_Overlap = gpd.GeoDataFrame({'geometry': geometries})
# Add an "ID_Rast" column to the GeoDataFrame
vect_Overlap['ID_Rast'] = range(1, len(geometries) + 1)
# Plot the polygons with "ID_Rast" as the attribute
vect_Overlap.plot(column='ID_Rast', cmap='jet', legend=True)
plt.show()
plt.close()
# Read the raster and get the shapes
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
transform = rast_Test.transform
shapes = rasterio.features.shapes(rast_Test.read(1), transform=transform)
# Convert the shapes to a GeoDataFrame
geometries = [shape(s) for s, v in shapes if v == 1]
vect_Overlap = gpd.GeoDataFrame({'geometry': geometries})
# Add an "ID_Rast" column to the GeoDataFrame
vect_Overlap['ID_Rast'] = range(1, len(geometries) + 1)
# Plot the polygons with "ID_Rast" as the attribute
vect_Overlap.plot(column='ID_Rast', cmap='jet', legend=True)
plt.show()
plt.close()
vect_Erase = gpd.overlay(vect_Test, vect_Overlap, how='difference')
vect_Overlap
vect_Test
vect_Overlap = vect_Overlap.to_crs(crs="EPSG:31468")
# Erase operation
vect_Erase = gpd.overlay(vect_Test, vect_Overlap, how='difference')
vect_Overlap
vect_Overlap2 = vect_Overlap.to_crs(crs="EPSG:31468")
vect_Erase = gpd.overlay(vect_Test, vect_Overlap2, how='difference')
# Read the raster and get the shapes
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
transform = rast_Test.transform
shapes = rasterio.features.shapes(rast_Test.read(1), transform=transform)
# Convert the shapes to a GeoDataFrame
geometries = [shape(s) for s, v in shapes if v == 1]
vect_Overlap0 = gpd.GeoDataFrame({'geometry': geometries})
# Add an "ID_Rast" column to the GeoDataFrame
vect_Overlap0['ID_Rast'] = range(1, len(geometries) + 1)
vect_Overlap = vect_Overlap0.to_crs(crs="EPSG:31468")
# Plot the polygons with "ID_Rast" as the attribute
vect_Overlap.plot(column='ID_Rast', cmap='jet', legend=True)
plt.show()
plt.close()
vect_Erase = gpd.overlay(vect_Test, vect_Overlap, how='difference')
# Read the raster and get the shapes
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
transform = rast_Test.transform
shapes = rasterio.features.shapes(rast_Test.read(1), transform=transform)
# Convert the shapes to a GeoDataFrame
geometries = [shape(s) for s, v in shapes if v == 1]
vect_Overlap0 = gpd.GeoDataFrame({'geometry': geometries})
# Add an "ID_Rast" column to the GeoDataFrame
vect_Overlap0['ID_Rast'] = range(1, len(geometries) + 1)
vect_Overlap = vect_Overlap0.to_crs(crs="EPSG:31468")
# Plot the polygons with "ID_Rast" as the attribute
vect_Overlap.plot(column='ID_Rast')
plt.show()
plt.close()
# Read the raster and get the shapes
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
transform = rast_Test.transform
shapes = rasterio.features.shapes(rast_Test.read(1), transform=transform)
# Convert the shapes to a GeoDataFrame
geometries = [shape(s) for s, v in shapes if v == 1]
vect_Overlap = gpd.GeoDataFrame({'geometry': geometries})
# Add an "ID_Rast" column to the GeoDataFrame
vect_Overlap['ID_Rast'] = range(1, len(geometries) + 1)
vect_Overlap.crs ="EPSG:31468"
# Plot the polygons with "ID_Rast" as the attribute
vect_Overlap.plot(column='ID_Rast')
plt.show()
plt.close()
vect_Erase = gpd.overlay(vect_Test, vect_Overlap, how='difference')
vect_Erase.plot(column='ID_region', cmap='jet', legend=True)
plt.title("Erase Operation")
plt.show()
vect_Erase.plot(column='ID_region', cmap='jet')
plt.title("Erase Operation")
plt.show()
# Intersect operation
vect_Intersect = gpd.overlay(vect_Test, vect_Overlap, how='intersection')
vect_Intersect.plot(column='ID_region', cmap='jet')
plt.title("Intersect Operation")
plt.show()
# Union operation
vect_Union = gpd.overlay(vect_Test, vect_Overlap, how='union')
quit
vect_Erase <- erase(vect_Test, vect_Overlap)
plot(vect_Erase, "ID_region")
reticulate::repl_python()
rast_Add = rast_Test + 10
import os
import pandas as pd
import numpy as np
# Vector
import geopandas as gpd
from shapely.geometry import Point, LineString, Polygon, shape
import fiona
# Rster
import rasterio
from rasterio.plot import show as rast_plot
from rasterio.crs import CRS
from rasterio.warp import calculate_default_transform, reproject, Resampling
import rasterio.features
# Plot
import matplotlib.pyplot as plt
# Read the raster and get the shapes
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
transform = rast_Test.transform
shapes = rasterio.features.shapes(rast_Test.read(1), transform=transform)
# Convert the shapes to a GeoDataFrame
geometries = [shape(s) for s, v in shapes if v == 1]
vect_Overlap = gpd.GeoDataFrame({'geometry': geometries})
# Add an "ID_Rast" column to the GeoDataFrame
vect_Overlap['ID_Rast'] = range(1, len(geometries) + 1)
vect_Overlap.crs ="EPSG:31468"
# Plot the polygons with "ID_Rast" as the attribute
vect_Overlap.plot(column='ID_Rast')
plt.show()
plt.close()
rast_Add = rast_Test + 10
rast_Add = rast_Test.read(1) + 10
rast_Test
rast_Test.read(1)
rast_Add = rast_Test.read(1) + 10
rast_plot(rast_Add, cmap='viridis')
rast_Test_data = rast_Test.read(1)
rast_Add = rast_Test_data + 10
rast_plot(rast_Add, cmap='viridis')
# Create a copy of the raster
rast_Replace = rast_Test_data
rast_Replace[rast_Replace > 1] = 10
rast_plot(rast_Replace, cmap='viridis')
# Calculate the mean between rast_Test and rast_Replace
rast_Mean = (rast_Test_data + rast_Replace) / 2
rast_plot(rast_Mean, cmap='viridis')
rast_plot(rast_Mean, cmap='viridis')
rast_Mean
rast_plot(rast_Mean)
rast_plot(rast_Mean)
rast_Test_data
rast_Test
rast_Test_data
quit
rast_Test
# Read raster file
rast_Test <- rast("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc")
# load the library
library(terra)
library(tidyverse)
# Read raster file
rast_Test <- rast("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc")
# Info and Plot of raster layer
rast_Test
plot(rast_Test)
reticulate::repl_python()
rast_Test_data = rast_Test.read()
rast_Test_data
rast_Test_data = rast_Test.read()
# Addition operation
rast_Add = rast_Test_data + 10
rast_plot(rast_Add, cmap='viridis')
rast_Add
rast_Test
rast_Add = rast_Test + 10
plt.imshow(rast_Add, cmap='viridis')
rast_Add
plt.imshow(rast_Add, cmap='viridis')
plt.show()
plt.close()
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
# Read the data from the raster
rast_Test_data = rast_Test.read(1)
# Add 10 to each pixel in the raster
rast_Add = rast_Test_data + 10
# Visualize the result using rast_plot
rast_plot(rast_Add, cmap='viridis')
rast_Add
rast_plot(rast_Add)
rast_plot(rast_Add)
rast_Test_data = rast_Test.read(1)
rast_Test_data[rast_Test_data == -9999] = np.nan
# Add 10 to each pixel in the raster
rast_Add = rast_Test_data + 10
# Visualize the result using rast_plot
rast_plot(rast_Add)
rast_Add
fig, ax = plt.subplots(figsize=(8, 8))
cax = rast_plot(rast_Add, cmap='viridis', ax=ax)
plt.colorbar(cax, label='Values')
import os
import pandas as pd
import numpy as np
# Vector
import geopandas as gpd
from shapely.geometry import Point, LineString, Polygon, shape
import fiona
# Rster
import rasterio
from rasterio.plot import show as rast_plot
from rasterio.crs import CRS
from rasterio.warp import calculate_default_transform, reproject, Resampling
import rasterio.features
# Plot
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(8, 8))
cax = rast_plot(rast_Add, cmap='viridis', ax=ax)
plt.colorbar(cax, label='Values')
plt.show()
fig, ax = plt.subplots(figsize=(8, 8))
cax = rast_plot(rast_Add, cmap='viridis', ax=ax)
# Add a colorbar to the plot
cbar = plt.colorbar(cax, label='Values')
# Show the plot
plt.show()
fig, ax = plt.subplots(figsize=(8, 8))
# Use the show function to display the raster
show(rast_Test, ax=ax)
# Add a colorbar
cbar = plt.colorbar(ax=ax)
# Set the colorbar label (you can customize it)
cbar.set_label("Legend Title")
# Show the plot
plt.show()
fig, ax = plt.subplots(figsize=(8, 8))
# Use the show function to display the raster
rast_plot(rast_Test, ax=ax)
rast_Test
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_plot(rast_Test)
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc")
rast_plot(rast_Test)
rast_Add = rast_Test_data + 10
rast_plot(rast_Add)
rast_plot(rast_Add, ax=ax)
fig, ax = plt.subplots(figsize=(8, 8))
# Use the show function to display the raster
rast_plot(rast_Add, ax=ax)
# Add a colorbar
cbar = plt.colorbar(ax=ax)
# Set the colorbar label (you can customize it)
cbar.set_label("Legend Title")
# Show the plot
plt.show()
with rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc") as src:
# Create a plot
fig, ax = plt.subplots(figsize=(8, 8))
# Use the show function to display the raster
rast_plot(src, ax=ax)
# Add a colorbar
cbar = plt.colorbar(ax=ax)
# Set the colorbar label (you can customize it)
cbar.set_label("Legend Title")
# Show the plot
plt.show()
rast_plot(rast_Add)
rast_plot(rast_Add)
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
rast_Add = rast_Test.read(1) + 10
rast_plot(rast_Add, cmap='viridis')
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
rast_Test_data = rast_Test.read(1)
rast_Add = rast_Test_data + 10
rast_plot(rast_Add, cmap='viridis')
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = CRS.from_epsg(31468)
rast_Test_data = rast_Test.read(1)
rast_Test_data[rast_Test_data == -9999] = np.nan
# Add 10 to each pixel in the raster
rast_Add = rast_Test_data + 10
rast_plot(rast_Add)
rast_Replace = rast_Test_data
# Replace values greater than 1 with 10
rast_Replace[rast_Replace > 1] = 10
rast_Replace.write(rast_Replace, 1)
rast_plot(rast_Replace)
rast_Replace)
rast_Replace
from rasterio.enums import Resampling
# Aggregate by factor 2
rast_Aggregate = rast_Test_data
rast_Aggregate = rast_Aggregate[::2, ::2]
rast_plot(rast_Aggregate)
# Disaggregate by factor 2
rast_Disagg = rast_Test_data
rast_Disagg = np.repeat(np.repeat(rast_Disagg, 2, axis=0), 2, axis=1)
rast_plot(rast_Disagg)
from shapely.geometry import mapping
# Open the raster file
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
from rasterio.features import geometry_mask
# Open the raster file
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
# Read the data from the raster
rast_Test_data = rast_Test.read(1)
# Read the GeoDataFrame from the GeoJSON file
vect_Test = gpd.read_file("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_polygon.geojson")
# Get the geometry of the first feature in vect_Test
crop_geometry = vect_Test.iloc[0:1].geometry.values[0]
# Create a mask for the crop_geometry on the raster
mask = geometry_mask([crop_geometry], out_shape=rast_Test.shape, transform=rast_Test.transform, invert=True)
# Apply the mask to the raster
rast_Crop = rast_Test_data.copy()
rast_Crop[~mask] = rast_Test.nodata  # Set values outside the geometry to nodata
# Plot the cropped raster
fig, ax = plt.subplots(figsize=(8, 8))
rast_plot(rast_Crop, cmap='viridis', ax=ax)
plt.title("Cropped Raster")
plt.show()
crop_geometry
rast_Crop
rast_plot(rast_Crop)
rast_Test = rasterio.open("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_raster.asc", 'r+')
rast_Test.crs = rasterio.crs.CRS.from_epsg(31468)
# Read the data from the raster and replace -9999 with NaN
rast_Test_data = rast_Test.read(1)
rast_Test_data[rast_Test_data == -9999] = np.nan
# Read the vector layer
vect_Test = gpd.read_file("https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/minibeispiel_polygon.geojson")
# Crop the raster with the geometry of the first feature in vect_Test
crop_geometry = vect_Test.iloc[0].geometry
rast_Crop, crop_transform = rasterio.mask.mask(rast_Test, [crop_geometry], crop=True, filled=False)
rast_Crop = rast_Crop[0]  # Extract the cropped raster
# Plot the cropped raster
fig, ax = plt.subplots(figsize=(8, 8))
rast_plot(rast_Crop, cmap='viridis', ax=ax)
plt.title("Cropped Raster")
plt.show()
crop_geometry = vect_Test.iloc[0:1].geometry.values[0]
from rasterio.features import geometry_mask
mask = geometry_mask([crop_geometry], out_shape=rast_Test.shape, transform=rast_Test.transform, invert=True)
# Apply the mask to the raster
rast_Crop = rast_Test_data.copy()
rast_Crop[~mask] = rast_Test.nodata  # Set values outside the geometry to nodata
rast_Crop
mask
os.remove(fn_Rast_New)
fn_Rast_New = 'C:\\Lei\\HS_Web\\data_share/minibeispiel_raster.tif'
os.remove(fn_Rast_New)
