---
title: "Basic format"
sidebar:
  contents: auto
---

In the realm of hydrological modeling, various data structures and file formats are employed to effectively manage, analyze, and simulate hydrological processes. These structures and formats facilitate the representation of hydrological data, making it accessible for researchers, modelers, and decision-makers. Below are some of the common **data structure**s and **file format**s used in hydrological modeling, along with their key features.


Overview:

![](../images/dataformat_overview.svg)

# Data Structure

Data structures are fundamental constructs used to **organize** and **store** data in a computer's memory. They enable efficient **access**, **modification**, and **management** of data during *program execution*. These structures are designed to suit various needs, from simple storage to complex operations and algorithms. 

Common data structures include arrays, linked lists, stacks, queues, trees, graphs, and more. Choosing the appropriate data structure is critical in designing efficient and effective algorithms for solving computational problems. Understanding data structures is a fundamental skill for every programmer, aiding in the creation of optimized and scalable software solutions.

In our context (in this section), we will focus on discussing commonly used data structures for modeling, excluding specific storage file formats. These data structures provide insights into how data is organized and managed, irrespective of the various file formats that can represent the same data structure.

These data structures play a vital role in organizing, analyzing, and visualizing data, making them essential tools for data scientists and analysts.

## Array 

Arrays are collections of elements, typically of the **SAME** data type, organized in a linear or multi-dimensional fashion. They provide efficient data storage and manipulation, making them essential for numerical computations.



![](../images/dataformat_array.svg)

## Table (Dataframe)

Tabular data structures, often referred to as tables, are a fundamental way of organizing and representing data in a structured format. They consist of rows and columns, where each row typically represents a single **observation** or **record**, and each column represents a specific **attribute** or **variable** associated with those observations. Tabular structures are highly versatile and are widely used for storing and analyzing various types of data, ranging from simple lists to complex datasets. This characteristic of tables enables them to represent and manage a wide range of information efficiently.

Compare to array, in a table, columns are allowed to have different data types, but all values within a specific column must share the **same data type**. 


![](../images/dataformat_table.svg){width=60%}

## Spatial Data

More Details in [Spatial Data Science](https://rspatial.org/spatial/2-spatialdata.html)

Spatial data refers to data that has a **geographic** or **spatial** component, representing the locations and shapes of physical objects on the Earth's surface. This type of data is essential in various fields, including geography, environmental science, urban planning, and more. One of the key elements in spatial data is its association with coordinate systems, which allow precise location referencing. 

### Spatial Vector

Spatial vector data structures represent geometric shapes like **points**, **lines**, and **polygons** in space. They are widely used in geographic information systems (GIS) for mapping and analyzing spatial data, such as landuse boundaries or river networks.

![](../images/dataformat_vector.svg)

The term "Vector" is used because spatial vector data is essentially stored as a **vector** of points, lines, or polygons (which are composed of lines). The data structure for geographic shapes is divided into two key components:

1. **Geometry**: Geometry represents the spatial shape or location of the geographic feature. It defines the boundaries, points, lines, or polygons that make up the feature. These geometric elements are used to precisely describe the geometric feature.

2. **Attributes**: Attributes are associated with the geographic feature and provide additional information about it. These attributes can include data such as the feature's name, population, temperature, or any other relevant details. Attributes are typically organized and stored in a tabular format, making it easy to perform data analysis and visualization.

The data structure of **points** in geospatial data is relatively simple. The geometry of one point is described by its coordinates, typically represented as X (or longitude) and Y (or latitude) values. 

![](../images/dataformat_point.svg){width=70%}

On the other hand, lines and polygons are more complex geometric shapes. The geometry of a line or polygon is defined by **a sequence of multiple points**. These points are connected in a specific order to form the shape of the line or polygon. In other words, the geometry of every line (or polygon) is composed of a series of coordinates of points.

![](../images/dataformat_linePolygon.svg)

### Spatial Raster

Spatial raster data structures are **grid-based** representations of spatial data, where each cell holds a value. They are commonly used for storing continuous data, like satellite imagery or elevation models. 


The datastructure of raster data is quite simple. In a raster, each **row shares the same X** value, and each **column shares the same Y** value. Additionally, in most situations, the resolution in each dimension remains constant. This means that specifying the starting point and the resolutions is usually sufficient to describe the coordinates of every grid cell. A single raster layer indeed resembles a 2D matrix. 

![](../images/dataformat_raster.svg){width=60%}



### Coordinate Reference System (CRS)

In addition to Geometry (of Vector) and Koordinate (of aster), another essential component of spatial data is the Coordinate Reference System (CRS). The CRS plays a crucial role in geospatial data by providing a framework for translating the **Earth's 3D surface into a 2D coordinate** system. 

Key points about the Coordinate Reference System (CRS) include:

1. **Projection**: The CRS defines how the Earth's curved surface is projected onto a 2D plane, enabling the representation of geographic features on maps and in geographic information systems (GIS). Different projection methods exist, each with its own strengths and weaknesses depending on the region and purpose of the map.

3. **Units**: CRS specifies the units of measurement for coordinates. Common units include degrees (for latitude and longitude), meters, and feet, among others.

4. **Reference Point**: It establishes a reference point (usually the origin) and orientation for the coordinate system.

5. **EPSG Code**: Many CRS are identified by an EPSG (European Petroleum Survey Group) code, which is a unique numeric identifier that facilitates data sharing and standardization across GIS systems.

The CRS is fundamental for correctly interpreting and analyzing spatial data, as it ensures that geographic features are accurately represented in maps and GIS applications. Different CRSs are used for different regions and applications to minimize distortion and provide precise geospatial information.

The use of **EPSG (European Petroleum Survey Group) codes** is highly recommended for defining Coordinate Reference Systems (CRS) in spatial data. These codes consist of a string of numbers that uniquely identify a specific CRS. By using EPSG codes, you can easily access comprehensive definitions of different CRSs, which include details about their coordinate systems, datums, projections, and other parameters. Many software applications and libraries support EPSG codes, making it a standardized and convenient way to specify CRS information in spatial data.


## Time Series

Time series data structures are specifically designed to capture and represent information recorded over a period of time. They play a crucial role in analyzing trends, patterns, and dependencies within sequences of data. Time series data, by definition, have a **temporal dimension**, making time an essential component of these structures.

In comparison to spatial information, time information is relatively straightforward. When the time dimension progresses in uniform steps, it can be efficiently described using the start time and step intervals. However, when the time intervals are irregular or non-uniform, additional time-related details are necessary. This can include specifying the year, month, and day for date-based time data or the hour, minute, and second for time-based information.

It's worth noting that while most time series data adheres to the standard calendar system, some datasets may use alternative calendar systems such as the Julian calendar. Additionally, time zone information is crucial when working with time data, as it ensures accurate temporal references across different geographical regions.

![](../images/dataformat_timeserise.svg)



# Data File Format

To store data with the same structure, various file formats are available, and some of these formats can even accommodate different types of data structures. In the following sections, we will explore the fundamental file formats commonly used in the environmental modeling domain.


## Plain text (ASCII)

ASCII (American Standard Code for Information Interchange) is a **plain text** format, making it human-readable.

### Advantages

1. **Human-Readable:**  Users can easily view, understand, and edit the data directly in a text editor.

2. **Widespread Support, Ease of Import/Export:** ASCII is universally supported. Most programming languages, data analysis tools, and software applications can read and write ASCII files, ensuring high compatibility.

3. **Lightweight:** ASCII files are typically lightweight and **do not consume excessive storage space**, making them suitable for large datasets.

4. **Simple Structure:** ASCII files have a straightforward structure, often using lines of text with fields separated by delimiters. This simplicity aids in data extraction and manipulation.


### Disadvantages

1. **Limited Data Types:** ASCII primarily handles **text-based** data and is not suitable for complex data types such as images, multimedia, or hierarchical data.

2. **No Inherent Data Validation:** ASCII files lack built-in mechanisms for data validation or integrity checks, requiring users to ensure data conformity.

3. **Lack of Compression:** ASCII files do **not inherently** support data compression, potentially resulting in larger file sizes compared to binary formats.

4. **Slower Reading/Writing:** Reading and writing data in ASCII format may be slower, especially for large datasets, due to additional parsing required to interpret text-based data.

### file format for ASCII data

When it comes to plain text formats, there is no universal standard, and it's highly adaptable to specific needs. The initial step in loading a plain text table is to analyze the structure of the file.

Typically, a text table can store **2D data**, comprising columns and rows or a matrix. However, above the data body, there's often metadata that describes the data. Metadata can vary widely between data body.

Dividing rows is usually straightforward and can be achieved by identifying **row-end characters**. However, dividing columns within each row presents multiple possibilities, such as **spaces**, **tabs**, **commas**, or **semicolons**. 


- **.txt**: This is the most generic and widely used file extension for plain text files. It doesn't imply any specific format or structure; it's just a simple text file.

- **.csv** (Comma-Separated Values): While CSV files contain data separated by commas, they are still considered ASCII files because they use plain text characters to represent data values. Each line in a CSV file typically represents a record, with values separated by commas.

In .txt files, any of these separators can be used, but in .csv files, commas or semicolons are commonly employed as separator characters.

## Excel Files

Excel files, often denoted with the extensions .xls or .xlsx, are a common file format used for storing structured data in **tabular form**. These files are not to be confused with the Microsoft Excel software itself but are the data containers created and manipulated using spreadsheet software like Excel.

Excel files are widely used in various applications, including data storage, analysis, reporting, and sharing. They consist of rows and columns, where each cell can contain **text**, **numbers**, **formulas**, or **dates**. These files are versatile and can hold different types of data, making them a popular choice for managing information.

### Advantages:

1. **User-Friendly Interface:** Excel's user-friendly interface makes it accessible to users with varying levels of expertise. Its familiar grid layout simplifies data input and manipulation.

2. **Versatility:** Excel can handle various types of data, from simple lists to complex calculations.

3. **Formulas and Functions:** Excel provides an extensive library of built-in formulas and functions, allowing users to automate calculations and streamline data processing.

4. **Data Visualization:** Creating charts and graphs in Excel is straightforward. It helps in visualizing data trends and patterns, making complex information more accessible.

5. **Data Validation:** Excel allows you to set rules and validation criteria for data entry, reducing errors and ensuring data accuracy.


### Disadvantages:

1. **Limited Data Handling:** Excel has limitations in handling very large datasets. Performance may degrade, and it's not suitable for big data analytics.

2. **Lack of Version Control:** Excel lacks robust version control features, making it challenging to track changes and manage document versions in collaborative environments.



In conclusion, Excel is a valuable tool for various data-related tasks but comes with limitations in terms of scalability, data integrity, and security. Careful consideration of its strengths and weaknesses is essential when deciding whether it's the right choice for your data management needs.


## Binary 

Unlike text-based files, binary files store data in a way that is **optimized for computer processing** and can represent a wide range of data types, from simple numbers to complex structures. These files are used in various applications, including programming, scientific research, and data storage, due to their efficiency in handling data.

### Advantages of Binary Formats

1. **Efficiency:** Binary formats are highly efficient for data storage and transmission because they represent data in a compact **binary** form. This can significantly reduce storage space and data transfer times, making them ideal for large datasets.

2. **Data Integrity:** Binary formats often include built-in mechanisms for data integrity and error checking. This helps ensure that data remains intact and accurate during storage and transmission.

3. **Complex Data:** Binary formats can represent complex data structures, which makes them suitable for a **wide range of data types**.

4. **Faster I/O:** Reading and writing data in binary format is generally faster than text-based formats like ASCII. This efficiency is particularly important for applications that require high-speed data processing.

5. **Security:** Binary formats can provide a level of data security because they are not easily human-readable. This can be advantageous when dealing with sensitive information.

### Disadvantages of Binary Formats

1. **Lack of Human-Readability:** Binary formats are not human-readable, making it difficult to view or edit the data directly. This can be a disadvantage when data inspection or manual editing is required.

2. **Compatibility:** Binary formats may not be universally compatible across different software platforms and programming languages. This can lead to issues when sharing or accessing data in various environments.

3. **Limited Metadata:** Binary formats may not include comprehensive metadata structures, making it challenging to document and describe the data effectively.

4. **Version Compatibility:** Changes in the binary format's structure or encoding can lead to compatibility issues when working with data created using different versions of software or hardware.

5. **Platform Dependence:** Binary formats can be platform-dependent, meaning they may not be easily transferable between different operating systems or hardware architectures.

Binary formats are a valuable choice for certain applications, particularly when efficiency, data integrity, and complex data types are crucial. However, they may not be suitable for all scenarios, especially when human readability, compatibility, or ease of data inspection is essential.

## NectCDF


NetCDF (Network Common Data Form) is a versatile data format widely used in scientific and environmental applications. It is primarily a binary data format, but it includes structured elements for efficient data storage and management. Here are some key characteristics of NetCDF:

- **Binary Representation:** NetCDF data files are primarily stored in binary format, which enables efficient storage and handling of numerical data, particularly floating-point numbers.

- **Self-Describing:** NetCDF files are self-describing, meaning they include **metadata alongside the data**. This metadata provides essential information about the data's structure, dimensions, units, and other attributes.

- **Hierarchical Structure:** NetCDF supports a hierarchical structure capable of representing complex data types, including multi-dimensional arrays and groups of data variables.

- **Data Compression:** NetCDF allows for data compression, which can reduce the storage space required for large datasets while maintaining data integrity.

- **Language Support:** NetCDF libraries and tools are available for multiple programming languages, making it accessible to a wide range of scientific and data analysis applications.

NetCDF's combination of binary efficiency and structured metadata makes it an invaluable choice for storing and sharing scientific data, particularly in fields such as meteorology, oceanography, and environmental science.


## Database Systems 

Database Systems, such as SQL and NoSQL databases, are crucial for efficiently managing and querying large, **structured datasets**. They provide structured data storage, ensuring data **integrity** and **consistency**. SQL databases like MySQL and PostgreSQL are well-suited for relational data, while NoSQL databases like MongoDB excel in handling semi-structured or unstructured data. These systems are commonly used for storing long-term observational data, model outputs, and sensor data in scientific research and various enterprise applications.


### Advantages

1. **Efficient Data Retrieval:** Databases are optimized for querying and retrieving data, making it quick and efficient to access information.

2. **Data Integrity:** Databases enforce data integrity rules, ensuring that data remains consistent and reliable over time.

3. **Structured Storage:** They provide a structured way to store data, making it easier to organize and manage large datasets.

4. **Concurrent Access:** Multiple users or applications can access the database simultaneously, enabling collaboration and scalability.

5. **Security:** Database systems offer security features like user authentication and authorization to protect sensitive data.

6. **Backup and Recovery:** They often include mechanisms for automated data backup and recovery, reducing the risk of data loss.

### Disadvantages

1. **Complexity:** Setting up and maintaining a database can be complex and requires specialized knowledge.

2. **Cost:** Licensing, hardware, and maintenance costs can be significant, especially for enterprise-grade database systems.

3. **Scalability Challenges:** Some database systems may face scalability limitations as data volume grows.

4. **Learning Curve:** Users and administrators need to learn query languages (e.g., SQL) and database management tools.

5. **Overhead:** Databases can introduce overhead due to indexing, data normalization, and transaction management.

6. **Vendor Lock-In:** Depending on the chosen database system, there may be vendor lock-in, making it challenging to switch to another system.

7. **Resource Intensive:** Databases consume computing resources, such as CPU and RAM, which can affect system performance.

The choice of using a database system depends on specific requirements, such as data volume, complexity, security, and scalability needs. It's essential to carefully evaluate the advantages and disadvantages in the context of your project.


## Spatial Data File Formats

Spatial data files are a specialized type of data format designed for storing geographic or location-based information. Unlike standard data files that store text, numbers, or other types of data, spatial data files are tailored for representing the **geographical features** of our world.

Spatial data comes in various file formats, each tailored for specific types of geographic data and applications. Here are some commonly used formats and their key differences:


### Raster Data Formats

More Raster file-formats in [GDAL](https://gdal.org/drivers/raster/index.html)


1. **TIFF (Tagged Image File Format)**:
   - A widely used raster format for storing high-quality images and raster datasets.
   - Supports georeferencing and metadata, making it suitable for spatial applications.

2. **ASC (Arc/Info ASCII Grid)**:
   - A plain text format used to represent raster data in a grid format.
   - Contains elevation or other continuous data with rows and columns of values.

3. **JPEG (Joint Photographic Experts Group)**, **PNG (Portable Network Graphics)**:
   - Commonly used for photographs and images, but not ideal for spatial analysis due to lossy compression.

### Vector Data Formats

More Vector file-formats in [GDAL](https://gdal.org/drivers/vector/index.html)

1. **Shapefile (SHP)**:
   - One of the most common vector formats used in GIS applications.
   - Consists of multiple files (.shp, .shx, .dbf, etc.) to store point, line, or polygon geometries and associated attributes.

2. **GeoPackage (GPKG)**:
   - An open, standards-based platform-independent format for spatial data.
   - Can store multiple layers, attributes, and geometries in a single file.

3. **KML (Keyhole Markup Language)**:
   - XML-based format used for geographic visualization in Earth browsers like Google Earth.
   - Suitable for storing points, lines, polygons, and related attributes.

4. **GeoJSON**:
   - A lightweight format for encoding geographic data structures using JSON (JavaScript Object Notation).
   - Ideal for web applications due to its simplicity and ease of use.





