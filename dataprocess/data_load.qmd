---
title: "load data"
execute:
  warning: false
  error: false
sidebar:
  contents: auto
---

This Aritcl will show the process to load data from other files. I t will divide into four paties: plain text (read able ASCII), Excel, NetCDF and spatial data. 

# Plain text File

For more details about date (file) format, you can refer to the article titled [Basic Data & File Format](basic_format.qmd).

## Example File

Let's start with an example CSV file named `Bachum_2763190000100.csv`. This file contains pegel discharge data and is sourced from open data available at [ELWAS-WEB NRW](https://www.elwasweb.nrw.de/elwas-web/index.xhtml). You can also access it directly from the internet via [Github](https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv), just like you would access a local file.

Take a look:


![](../images/bachum.png)

## R library and functions

First, we need to load the necessary library `tidyverse`. This library collection includes `readr` for reading files and `dplyr` for data manipulation, among others.

And, we set the URL address as the file path (including the file name).

```{r}
library(tidyverse)
fn_Bachum <- "https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/Bachum_2763190000100.csv"
```

The documentation for the `readr` library is available online and can be accessed at [https://readr.tidyverse.org](https://readr.tidyverse.org). 

Of particular interest are the following functions:

- [readr::read_csv()](https://readr.tidyverse.org/reference/read_delim.html)
- [readr::read_table()](https://readr.tidyverse.org/reference/read_table.html)

We can observe that the CSV file is divided by semicolons. Therefore, it's more appropriate to use `read_csv2()` rather than `read_csv()`.

## Metadata Handel

Metadata can vary widely between datasets, so it's handled separately from the data body.

There are three ways to deal with metadata:

1. **Directly Ignore:** This approach involves ignoring metadata when it's redundant or readily available from other data sources, such as file names or external references.

2. **Extract from Text:** When metadata is crucial but not in table form, you can extract information from text strings. For more information, refer to the section on string manipulation [@sec-string].

3. **Read as a Second Table:** If metadata is well-organized in a tabular format, it can be read as a separate table to facilitate its use.

In the `Bachum_2763190000100.csv` file, you will find that there are 10 lines of metadata, which are well-organized in a tabular format. However, it's important to note that the consistency in values column varies.

### Directly Ignore use grguments `skip`


```{r}
# skip = 10
read_csv2(fn_Bachum, skip = 10, n_max = 10, col_names = FALSE)
```

### read metadata as table

To read the first 10 lines of metadata, you can use the `n_max` setting with a value of `n_max = 10` in the `read_csv2()` function.


```{r}
read_csv2(fn_Bachum, n_max = 10, col_names = FALSE)
```

When directly reading all metadata into one table, you may encounter mixed data types. In the metadata, there are three data types:

- Numeric: Examples include `Pegelnullpunkt` and `Einzugsgebiet`.
- String: This category covers fields like `Name`, `Pegelnummer`, and others.
- Date: Date values are present in columns like `Datum von` and `Datum bis`.

In a data frame (tibble), columns must have the same data type. Consequently, R will automatically convert them to a single data type, which is typically string.

To address this situation, you should specify the data type you want to read. For example, to read the date values in lines 4 and 5, you can use the following settings:
1. `skip = 3` to skip the first three lines of metadata.
2. `n_max = 2` to read the next two lines (lines 4 and 5) as date values.


```{r}
# skip = 10
read_csv2(fn_Bachum, skip = 3, n_max = 2, col_names = FALSE)
```

Unfortunately, R may not always recognize date values correctly, so you may need to perform additional steps for conversion:

1. **After Reading:** This involves transforming the data from its initial format to the desired date format within your R environment.

2. **Set the Data Type by Reading:** Another approach is to set the data type while reading the data. 

To address the issue of date recognition, you can set the `col_types` parameter to `"cD"` when reading the data. This informs the function that the first column contains `c`haracters (`c`) and the second column contains `D`ates (`D`).


```{r}
# skip = 10
read_csv2(fn_Bachum, skip = 3, n_max = 2, col_names = FALSE, col_types = "cD")
```


Unfortunately, the default date format in R may not work for German-style dates like "d.m.Y," as R primarily recognizes the "Y-m-d" format. To handle this, you can convert the dates using function `as.Date()` and specify the date format using the `format` argument, such as `format = "%d.%m.%Y"`.


```{r}
df_Date <- read_csv2(fn_Bachum, skip = 3, n_max = 2, col_names = FALSE)
df_Date$X2 <- df_Date$X2 |> as.Date(format = "%d.%m.%Y")
df_Date
```


# Text & String {#sec-string}

more details 