{
  "hash": "edd06117f668dca77793bdea6955ccbf",
  "result": {
    "markdown": "---\ntitle: \"ggplot2 Basic\"\nexecute:\n  warning: false\n  error: false\nsidebar:\n  contents: auto\nnumber-sections: true\nbibliography: ../../references.bib\n---\n\n\n# Components\n\nThe work of visualization involves the process of mapping the data into visualized geometry. There are three basic components to this: **data**, **geometry**, and **aesthetic mappings**. In this article, we will step-by-step learn about these three components.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # or: library(ggplot2)\n```\n:::\n\n\n\n## Data\n\nThe data structure in `ggplot2` is organized in a `data.frame` or a similar structure like `tibble`. As an example, we will use the `mpg` dataset from `ggplot2`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n:::\n:::\n\n\n\nThe dataframe can (should) contain all the information that you want to visualize.\n\n## Aesthetic Mappings\n\nThe aesthetic mappings define the connection (mapping) between variables in the data and visual properties of geometry. The properties of the geometry are derived from the chosen geometry. For example, almost every plot maps a variable to `x` and `y` to determine the position, and `color` or `size` provides additional details.\n\nThis mapping is established with the `aes()` function. In the `aes()` function, you need to use the format `property name = variable name` to connect the data and geometry, like `aes(x = displ, y = hwy)`.\n\nThe `aes()` function simply defines which variable is connected to which aesthetics, but for more detailed modifications of aesthetics, you can use the `scale_*()` functions. More details are provided in @sec-scale.\n\n\n## Geometry\n\nWith the same dataset, we can also choose different geometries, such as scatter points, lines, or bars. In `ggplot2`, all the geometries are defined using the `geom_*()` functions, like `geom_point()` and `geom_line()`. These functions specify how the data should be visually represented.\n\n# Geometry and Theme customize\n\n## `element_*()`\n\nIn conjunction with the theme system, the element_ functions specify the display of how non-data components of the plot are drawn [@Ggplot2_wickham_2009].\n\nThere are four main elements to specify the appearance of elements for the plot, axis, and more (details in [ggplot2 Theme elements](https://ggplot2.tidyverse.org/reference/element.html)):\n\n- `element_blank()`: draws nothing and assigns no space.\n\n- `element_rect()`: used for borders and backgrounds.\n\n- `element_line()`: defines the appearance of lines.\n\n- `element_text()`: controls the appearance of text.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nelement_blank()\n\nelement_rect(\n  fill = NULL,\n  colour = NULL,\n  linewidth = NULL,\n  linetype = NULL,\n  color = NULL,\n  inherit.blank = FALSE,\n  size = deprecated()\n)\n\nelement_line(\n  colour = NULL,\n  linewidth = NULL,\n  linetype = NULL,\n  lineend = NULL,\n  color = NULL,\n  arrow = NULL,\n  inherit.blank = FALSE,\n  size = deprecated()\n)\n\nelement_text(\n  family = NULL,\n  face = NULL,\n  colour = NULL,\n  size = NULL,\n  hjust = NULL,\n  vjust = NULL,\n  angle = NULL,\n  lineheight = NULL,\n  color = NULL,\n  margin = NULL,\n  debug = NULL,\n  inherit.blank = FALSE\n)\n```\n:::\n\n\n\nSome common characters include:\n\n- `fill`: fill color\n- `colour` or `color`: Line/border/text color. `color` is an alias for `colour`.\n- `linewidth`: Line/border size in mm.\n- `size`: Text size in pts.\n\nYou can find more scripts and detailed examples in the article [The elements of a plot](visual_plotElements.qmd).\n\n## Title Modify\n\nThe `element_*()` functions specifically define the style, but for certain text elements like titles or axis titles, you need to provide specific names. By default, these elements are named after the variables you have mapped them to.\n\n- `labs()`: This function allows you to modify all text related to titles, subtitles, captions, and tags for the plot, as well as aesthetic names (e.g., `x`, `y`, `color`, `fill`, etc.).\n\nFor individual elements, you can use specific functions:\n\n- `xlab()`: Set the x-axis label.\n- `ylab()`: Set the y-axis label.\n- `ggtitle()`: Set the main plot title.\n\nBy using these functions, you can precisely control the naming and appearance of text elements in your plot.\n\n## `scale_*()` {#sec-scale}\n\nThey take your data and turn it into something that you can see, like size, colour, position or shape. They also provide the tools that let you interpret the plot: the axes and legends. You can generate plots with ggplot2 without knowing how scales work, but understanding scales and learning how to manipulate them will give you much more control [@Ggplot2_wickham_2009].\n\n### Axis `scale_x_*()` and  `scale_y_*()`\n\nThere are two main types of axes: discrete, which represents values not in numerical order, and continuous axes.\n\n- `scale_*_discrete()`\n- `scale_*_continuous()`\n    - `scale_*_log10()`\n    - `scale_*_sqrt()`\n    - `scale_*_reverse()`\n\nAdditionally, there are specific axes (based on continuous) for dates (`scale_*_date()`) and bins (`scale_*_binned()`), commonly used in histograms.\n\nThe common attributes for axes include:\n\n- `name`: axis title\n- `breaks` / `minor_breaks`: break points for axis ticks and panel grid lines\n- `labels`: axis text of break points\n- `limits`: axis ranges\n\n### Colour `scale_color_*()` and `scale_fill_*()`\n\nLike axes, color mapping also has challenges with discrete and continuous data. \n\nFor continuous color mapping, there are:\n\n- Continuous: `scale_colour_continuous()`\n  - type: custom\n- Gradient:\n  - `scale_colour_gradient()` for two (`low` and `high`) colors\n  - `scale_colour_gradient2()` for three (`low`, `mid`, and `high`) colors\n  - `scale_colour_gradientn()` for defined colors\n- Binned: assigns discrete color bins to the continuous values\n  - `scale_colour_binned()`\n\nFor discrete data, use `scale_colour_manual()` to define the colors for values.\n\n### Other scales\n\nExcept for axes and color, other aesthetics can be simpler with `scale_*_manual()` to define:\n\n- `scale_size_manual()`\n- `scale_shape_manual()`\n- `scale_linetype_manual()`\n- `scale_linewidth_manual()`\n- `scale_alpha_manual()`\n\n\n## Fixed elements for specific geometry\n\nThe `scale_*()` functions primarily control the attributes of elements using data. However, there are situations where you may want to set fixed values for a specific element directly. For example, you can set the linewidth for colored lines: `geom_line(aes(color = dis), linewidth = 2)`. The settings outside the `aes()` function will be treated as fixed values for that particular geometry.\n\n\n\n\n# Plot\n\n\n    \n\n## Syntax\n\nThe syntax of `ggplot2` follows a **layered** approach, where you start with the base layer of data and progressively add additional layers to create a complex plot. \n\nThe basic syntax involves using the `ggplot()` function to initiate the plot, specifying the data and aesthetics using the `aes()` function, and then adding (use `+`) geometric elements with functions like `geom_point()` or `geom_line()`. Each added layer enhances the plot, and you can further customize it using various options. The syntax is intuitive and modular, allowing for flexible and expressive visualizations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = my_Data, aes(x = my_X, y = my_Y)) +\n  geom_point()\n```\n:::\n\n\n\nIn `ggplot2`, the `aes()` function (also `data`), which defines the aesthetic mappings, can be placed either within the `ggplot()` function for all geoms or inside the specific `geom_*()` function to apply mappings only to that geometry. This flexibility allows for clear and concise syntax, as aesthetic mappings can be specified globally for the entire plot or tailored for individual geometric layers. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data = my_Data, aes(x = my_X, y = my_Y))\n```\n:::\n\n\nNot only that, but you can also divide the mapping into several parts, with common mappings in the initial `ggplot()` function and other specific mappings in the given `geom_*()` functions. This allows for flexibility and customization in defining aesthetic mappings for different geometries in the same plot.\n\n\n\n## First `ggplot()`\n\n### Task\n\nWith the above three short introductions, we can now try the first plot with the `mpg` dataset.\n\nThe task is as follows:\n\n1. **Data**: Using the `mpg` dataset.\n    - Variables: `displ`, `hwy`, `class`\n2. **Geometry**: \n    - Colored scatter plot: `geom_point()`\n    - Smoothed line: `geom_smooth()`\n3. **Aesthetic Mappings**:\n    - x-dimension with `displ` (applied to both geoms): `x = displ`\n    - y-dimension with `hwy` (applied to both geoms): `y = hwy`\n    - Colored with `class` (only for scatter plot): `color = class`\n\n### Codes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy))+\n  geom_point(aes(colour = class)) + \n  geom_smooth() \n```\n\n::: {.cell-output-display}\n![](visual_ggplot2Basic_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Customize the elements\n\nFor the continuous axis, we will store the default plot in a variable `gp_Default`, and then we can use `+` to add future custom settings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngp_Default <- ggplot(data = mpg, aes(x = displ, y = hwy))+\n  geom_point(aes(colour = class)) + \n  geom_smooth() \n```\n:::\n\n\n\n\n\n### Label and Text\n\n- X-Axis in `\"Engine displacement (L)\"`\n- Y-Axis in `\"MPG in highway  (mi / gal)\"`\n- Title in `\"Fuel economy data\"`\n- Legend (color) title in `\"Car type\"`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngp_Default +\n  labs(x = \"Engine displacement (L)\", \n       y = \"MPG in highway (mi/gal)\", \n       colour = \"Car type\",\n       title = \"Fuel economy data\")\n```\n\n::: {.cell-output-display}\n![](visual_ggplot2Basic_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Axes\n\n- X-limits: 2 to 5\n- Y-breaks: from 15 to 45 every 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngp_Default +\n  scale_x_continuous(limits = c(2, 5)) +\n  scale_y_continuous(breaks = seq(15, 45, 5)) \n```\n\n::: {.cell-output-display}\n![](visual_ggplot2Basic_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Colour\n\n- Smooth line in red\n- points color in rainbow color\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngp_Default +\n  geom_smooth(color = \"red\") +\n  scale_color_manual(values = rainbow(7))\n```\n\n::: {.cell-output-display}\n![](visual_ggplot2Basic_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "visual_ggplot2Basic_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}