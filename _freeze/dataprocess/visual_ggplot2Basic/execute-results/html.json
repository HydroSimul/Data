{
  "hash": "f56a04721470a7c5b138f129b975c978",
  "result": {
    "markdown": "---\ntitle: \"ggplot2 Basic\"\nexecute:\n  warning: false\n  error: false\nsidebar:\n  contents: auto\nnumber-sections: true\nbibliography: ../../references.bib\n---\n\n\nThe work of visualization involves the process of mapping the data into visualized geometry. There are three basic components to this: **data**, **geometry**, and **aesthetic mappings**. In this article, we will step-by-step learn about these three components.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # or: library(ggplot2)\n```\n:::\n\n\n\n# Data\n\nThe data structure in `ggplot2` is organized in a `data.frame` or a similar structure like `tibble`. As an example, we will use the `mpg` dataset from `ggplot2`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n:::\n:::\n\n\n\nThe dataframe can (should) contain all the information that you want to visualize.\n\n# Aesthetic Mappings\n\nThe aesthetic mappings define the connection (mapping) between variables in the data and visual properties of geometry. The properties of the geometry are derived from the chosen geometry. For example, almost every plot maps a variable to `x` and `y` to determine the position, and `color` or `size` provides additional details.\n\nThis mapping is established with the `aes()` function. In the `aes()` function, you need to use the format `property name = variable name` to connect the data and geometry, like `aes(x = displ, y = hwy)`.\n\n# Geometry\n\nWith the same dataset, we can also choose different geometries, such as scatter points, lines, or bars. In `ggplot2`, all the geometries are defined using the `geom_*()` functions, like `geom_point()` and `geom_line()`. These functions specify how the data should be visually represented.\n\n# Plot\n\nWith the above three short introductions, we can now try the first plot with the `mpg` dataset.\n\n## Task\n\nThe task is as follows:\n\n1. **Data**: Using the `mpg` dataset.\n    - Variables: `displ`, `hwy`, `class`\n2. **Geometry**: \n    - Colored scatter plot: `geom_point()`\n    - Smoothed line: `geom_smooth()`\n3. **Aesthetic Mappings**:\n    - x-dimension with `displ` (applied to both geoms): `x = displ`\n    - y-dimension with `hwy` (applied to both geoms): `y = hwy`\n    - Colored with `class` (only for scatter plot): `color = class`\n    \n\n## Syntax\n\nThe syntax of `ggplot2` follows a **layered** approach, where you start with the base layer of data and progressively add additional layers to create a complex plot. \n\nThe basic syntax involves using the `ggplot()` function to initiate the plot, specifying the data and aesthetics using the `aes()` function, and then adding (use `+`) geometric elements with functions like `geom_point()` or `geom_line()`. Each added layer enhances the plot, and you can further customize it using various options. The syntax is intuitive and modular, allowing for flexible and expressive visualizations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = my_Data, aes(x = my_X, y = my_Y)) +\n  geom_point()\n```\n:::\n\n\n\nIn `ggplot2`, the `aes()` function (also `data`), which defines the aesthetic mappings, can be placed either within the `ggplot()` function for all geoms or inside the specific `geom_*()` function to apply mappings only to that geometry. This flexibility allows for clear and concise syntax, as aesthetic mappings can be specified globally for the entire plot or tailored for individual geometric layers. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data = my_Data, aes(x = my_X, y = my_Y))\n```\n:::\n\n\nNot only that, but you can also divide the mapping into several parts, with common mappings in the initial `ggplot()` function and other specific mappings in the given `geom_*()` functions. This allows for flexibility and customization in defining aesthetic mappings for different geometries in the same plot.\n\n\n## First `ggplot()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy))+\n  geom_point(aes(colour = class)) + \n  geom_smooth() \n```\n\n::: {.cell-output-display}\n![](visual_ggplot2Basic_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "visual_ggplot2Basic_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}