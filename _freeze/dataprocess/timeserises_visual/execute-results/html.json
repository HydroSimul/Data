{
  "hash": "1c938bcc5e2e9fd74bf7c183cf4c2be2",
  "result": {
    "markdown": "---\ntitle: \"Time Series Visualization\"\nexecute:\n  warning: false\n  error: false\nsidebar:\n  contents: auto\nnumber-sections: true\n---\n\n\n# Library and Data\n\nVisualizing time series is crucial for identifying patterns, trends, and anomalies in data over time. Here are some key considerations and methods for visualizing time series data.\n\nIn this Artikel we will use the R package `ggplot` (`tidyverse`) for plotig and the results data fro HBV Light as the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Library\nlibrary(tidyverse)\ntheme_set(theme_bw())\nlibrary(ggh4x) # difference area\nlibrary(reshape2)\n\n# File name\nfn_ResultsHBV <- \"https://raw.githubusercontent.com/HydroSimul/Web/main/data_share/tbl_HBV_Results.txt\"\n# Load Data\ndf_ResultHBV <- read_table(fn_ResultsHBV)\n\n# Convert Date column to a Date type\ndf_ResultHBV$Date <- as_date(df_ResultHBV$Date |> as.character(), format = \"%Y%m%d\")\n\nidx_1979 <- which(df_ResultHBV$Date >= as_date(\"1979-01-01\") & df_ResultHBV$Date <= as_date(\"1979-12-31\"))\ndf_Plot <- df_ResultHBV[idx_1979, ]\n```\n:::\n\n\n# Line Charts\n\nA fundamental tool for representing time series data. The x-axis represents time, while the y-axis shows the measured values, providing a clear view of changes over time.\n\n## Basic Line\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_Plot, aes(x = Date)) +\n  geom_line(aes(y = Qobs, color = \"Obs.\")) +\n  geom_line(aes(y = Qsim, color = \"Sim.\")) \n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Line Plot with Shaded Difference Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_Plot, aes(x = Date)) +\n  geom_line(aes(y = Qobs, color = \"Obs.\")) +\n  geom_line(aes(y = Qsim, color = \"Sim.\")) +\n  stat_difference(aes(ymin = Qsim, ymax = Qobs), alpha = .5) \n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## Line Cluster \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Melting the data for ggplot\ndf_Plot_Melt <- reshape2::melt(df_Plot[,c(\"Date\", \"Qsim\", \"Precipitation\", \"AET\")], id = \"Date\")\n# Plot\nggplot(df_Plot_Melt, aes(x = Date, y = value, color = variable, group = variable)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Barplot\n\nA bar plot is a graphical representation of data in which **bars** are used to represent the values of variables. \n\n## Basic Bar\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df_Plot, aes(x = Date)) +\n  geom_col(aes(y = Precipitation))\n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Stacked Bar\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Snowfall and rain fall caculate\ndf_Plot <- df_Plot |> mutate(Snowfall = pmax(0, c(0, diff(Snow))), \n                             Rainfall = Precipitation - Snowfall) \ndf_Plot_Melt2 <- reshape2::melt(df_Plot[1:120, c(\"Date\", \"Snowfall\", \"Rainfall\")], id = \"Date\")\n# Plot\nggplot(df_Plot_Melt2, aes(x = Date, y = value, fill = variable, group = variable)) +\n  geom_col(position=\"stack\")\n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Dodge\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot\nggplot(df_Plot_Melt2, aes(x = Date, y = value, fill = variable, group = variable)) +\n  geom_col(position=\"dodge\")\n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# Trend Line\n\nA trend line, also known as a regression line, is a **straight line** that best represents the general **direction** of a series of data points. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xts)\nxts_ResultsHBV <- as.xts(df_ResultHBV)\nxts_Temperature_Year <- apply.yearly(xts_ResultsHBV$Temperature, mean)\ndf_T_Year <- data.frame(Year = year(index(xts_Temperature_Year)), xts_Temperature_Year)\nggplot(df_T_Year, aes(x = Year, y = Temperature)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula= y~x)\n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n# Smooth Line\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxts_Temperature_Month <- apply.monthly(xts_ResultsHBV$Temperature, mean)\ndf_T_Month <- data.frame(Year = year(index(xts_Temperature_Month)), \n                        Month = month(index(xts_Temperature_Month)), xts_Temperature_Month)\nggplot(df_T_Month, aes(x = Month, y = Temperature)) +\n  geom_point(aes(color = Year)) + geom_line(aes(color = Year, group = Year)) +\n  geom_smooth(formula= y~x, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n# Areaplot\n\n## Stacked Area\n\nA stacked area plot is a type of data visualization that displays the **cumulative contribution** of different groups to a total over time or another continuous variable. Each group's contribution is represented as a colored area, and these areas are stacked on top of each other.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data\nmelt_Balance_Q <- df_Plot[,c(\"Date\", \"AET\", \"Q0\", \"Q1\", \"Q2\" )] |> melt(id = \"Date\")\n# Plot\nggplot(melt_Balance_Q, aes(Date, value, fill = variable)) +\n  geom_area() \n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Percent Area\n\nA percent stacked area plot is a variation of the stacked area plot where the y-axis represents **percentages**, showcasing the proportion of each group relative to the total at each point in time. This type of plot is particularly useful when you want to emphasize the **relative distribution** of different groups over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data\nmelt_Balance_Q$perc <- melt_Balance_Q$value / rowSums(df_Plot[,c(\"AET\", \"Q0\", \"Q1\", \"Q2\" )])\n# PLot\nggplot(melt_Balance_Q, aes(Date, perc, fill = variable)) +\n  geom_area() \n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n# Water Balance\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# If don't installed:\n# If remotes not installed, use: install.packages(\"remotes\")\n# remotes::install_github(\"HydroSimul/HydroCourse\")\nlibrary(HydroCourse)\nplot_water_balance.HBV(df_Plot)\n```\n\n::: {.cell-output-display}\n![](timeserises_visual_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "timeserises_visual_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}