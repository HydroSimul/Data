{
  "hash": "b383fddbcbcf661beee31ead2a3c1fcc",
  "result": {
    "markdown": "---\ntitle: \"Data in Workspace\"\n---\n\n\nMore Details in [R for Data Science (2e)](https://r4ds.hadley.nz/workflow-basics)\n\n## Coding basics\n\n### math calculations:\n\n- '+'\n- '-'\n- '*'\n- '/'\n- Trigonometric functions\n\n::: {.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 / 200 * 30\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.15\n```\n:::\n\n```{.r .cell-code}\n(59 + 73 - 2) / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 43.33333\n```\n:::\n\n```{.r .cell-code}\n3^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\nsin(pi / 2) # pi as Const number in R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## Python\n\n\n:::\n\n### Create new objects\n\n\n::: {.panel-tabset}\n\n## R\n\nCreate new objects with the assignment operator `<-`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"<-\" special in R \n\na <- 1 / 200 * 30\nb <- a + 1\n```\n:::\n\n\n## Python\n\n\n:::\n\n### Naming rules\n\n\n::: {.panel-tabset}\n\n## R\n\n- must start with a letter\n- can only contain letters, numbers, underscores `_`, and dot `.`\n- case-sensitive (age, Age and AGE are three different variables)\n- cannot be any of the Reserved Words\n  - `TRUE` `FALSE`\n  - `NULL` `Inf` `NaN` `NA` `NA_real` `NA_complex_` `NA_character_`\n  - `if` `else`\n  - `for` `while` `repeat` \n  - `next` `break`\n  - `function` \n  - `in`\n\n\n:::: {.columns}\n\n::: {.column width=\"48%\"}\n::: {.callout-tip}\n## Legal \n\ni_use_snake_case\n\notherPeopleUseCamelCase\n\nsome.people.use.periods\n\naFew.People_RENOUNCEconvention6\n:::\n\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n::: {.callout-warning}\n## Illegal \n\n_start_with_underscores\n\n1_start_with_number\n\nif\n\ncontain sapce\n\ncontain-other+charater\n\n:::\n\n:::\n\n::::\n\nmore Reserved Words in:\n\n```{.r}\nhelp(\"reserved\")\n```\n\n\n## Python\n\n- must start with a letter or the **underscore character `_`**\n- can only contain letters, numbers, and underscores `_` \n- case-sensitive (age, Age and AGE are three different variables)\n- cannot be any of the Python keywords (35 keywors in Python 3.8)\n  - `True` `False`\n  - `None` \n  - `if` `else` `elif`\n  - `for` `while` `repeat` \n  - `try` `break` `continue` `finally`\n  - `def`\n  - `in` `and` `or` `not`\n  - `return`\n\n:::: {.columns}\n\n::: {.column width=\"48%\"}\n::: {.callout-tip}\n## Legal \n\ni_use_snake_case\n\n_start_with_underscores\n\notherPeopleUseCamelCase\n\n\naFew_People_RENOUNCEconvention6\n:::\n\n:::\n\n::: {.column width=\"4%\"}\n:::\n\n::: {.column width=\"48%\"}\n::: {.callout-warning}\n## Illegal \n\nwant.contain.dot\n\n1_start_with_number\n\nif\n\ncontain sapce\n\ncontain-other+charater\n\n:::\n\n:::\n\n::::\n\nMore Keywords in:\n\n```{.python}\n>>> help(\"keywords\")\n\n```\n\n:::\n\n#### Programming Naming Conventions \n\n- **Camel Case**\n  - Each word, except the first, starts with a capital letter:\n  - `myVariableName` \n- **Pascal Case**\n  - Each word starts with a capital letter:\n  - `MyVariableName` \n- **Snake Case**\n  - Each word is separated by an underscore character:\n  - `my_variable_name` \n\n\n## Function\n\n### Calling\n\n::: {.panel-tabset}\n\n## R\n\nCalling Syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(argument1 = value1, argument2 = value2, ...)\n```\n:::\n\n\nWe can also check the arguments and other information with:\n\n```{.r}\n?seq\n```\n\n\nTry using `seq()`, which makes regular **seq**uences of numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\nWe often omit the names of the first several arguments in function calls, so we can rewrite this as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n:::\n\n\n\n## Python\n\n\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}