{
  "hash": "5e2ec73c3318b1196a66be87ee851ad8",
  "result": {
    "markdown": "---\ntitle: \"NetCDF\"\nexecute:\n  warning: false\n  error: false\nsidebar:\n  contents: auto\nnumber-sections: true\n---\n\n\nNetCDF stands for \"Network Common Data Form.\" It is a file format that is designed to store large **arrays** of data, primarily used in scientific and engineering applications. NetCDF files are self-describing, meaning they **contain metadata** along with the data, which makes it easier to understand the contents. NetCDF is particularly well-suited for storing **multi-dimensional** data, such as time series, spatial data, and climate model outputs. It can handle data with complex structures like grids, which are common in environmental and geospatial datasets.\n\nIn simple terms, NetCDF is a file format for storing multi-dimensional arrays of data along with metadata.\n\nMore Details in [unidata](https://www.unidata.ucar.edu/software/netcdf/).\n\n\nNetCDF files have a hierarchical structure, consisting of **dimensions**, **variables**, and **attributes**. Dimensions define the size of arrays, variables hold the data, and attributes provide additional information about the data.\n\n\n![](../images/dataformat_netcdf.svg)\n\nWith these three components, you can efficiently handle the import, creation, and export of data in the NetCDF format.\n\n## Library\n\nThe `ncdf4` R package is a powerful tool for working with NetCDF data in R, allowing you to **read**, **write**, and **manipulate** datasets in this format with ease and efficiency.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ncdf4)\nlibrary(tidyverse)\nfn_NetCDF <- \"C:\\\\Lei\\\\HS_Web\\\\data_share\\\\minibeispiel_NetCDF.nc\"\n```\n:::\n\n\n\nThe Test data `minibeispiel_NetCDF.nc` is avable from Github, but it can not be direcly read from Git hub so you need download to local.\n\n## Import\n\n### Open\n\nThe first step in working with NetCDF files is to **open** the file using the `nc_open()` function. However, it's important to note that opening the file **doesn't directly load** its contents into the R environment. Instead, it establishes a **connection** between the file and the R session and effectively locks the file for reading or writing operations. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_Test <- nc_open(fn_NetCDF)\n```\n:::\n\n\n### Basic Information\n\nAfter opening a NetCDF file in R, you can access the **basic information** about the dataset, which is contained in a list. This information typically includes details about three components: **dimensions**, **variables**, and **attributes** of the NetCDF file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access the dimensions\n# nc_Test$dim\nnc_Test$dim |> names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"latitude\"  \"longitude\" \"time\"     \n```\n:::\n\n```{.r .cell-code}\n# Access the variables\n# nc_Test$var\nnc_Test$var |> names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"T0\"  \"crs\"\n```\n:::\n\n```{.r .cell-code}\nnc_Test$var$T0$size\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6 8 3\n```\n:::\n\n```{.r .cell-code}\n# Access attributes\nncatt_get(nc_Test, 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$title\n[1] \"Multidimensional data example\"\n\n$author\n[1] \"Kan, Lei, kan.lei@ruhr-uni-bochum.de\"\n```\n:::\n:::\n\n\n### Values and Attributes\n\nWith the basic information about variables obtained, you can access the **values** and **attributes** of each variable as needed. You can also obtain specific subsets of variables using **start points** and **counts** for each dimension. \n\nAdditionally, dimensions are treated as variables in the NetCDF structure, making it easier to work with them.\n\n- `ncvar_get()`\n  - `start`: The starting point of every dimension to load variable values\n  - `count`:  The length of every dimension to read\n- `ncatt_get()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve the variable \"T0\" WHOLE\nncvar_get(nc_Test, \"T0\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n           [,1]       [,2]      [,3]      [,4]       [,5]       [,6]      [,7]\n[1,] 0.87323433 0.84079581 0.9281288 0.6661375 0.04758887 0.96682316 0.2882475\n[2,] 0.84566671 0.04471953 0.8753740 0.8303212 0.91060263 0.97662097 0.4387989\n[3,] 0.87702137 0.52173090 0.3899564 0.7390187 0.15751220 0.08919455 0.1058832\n[4,] 0.05253063 0.41560754 0.5622070 0.2759584 0.60747105 0.86474377 0.4941541\n[5,] 0.13788696 0.64514744 0.1193469 0.7815173 0.17213744 0.90108442 0.2186224\n[6,] 0.01323104 0.20803328 0.7549667 0.3373279 0.81990784 0.92592072 0.9812934\n          [,8]\n[1,] 0.4798310\n[2,] 0.8073431\n[3,] 0.2100407\n[4,] 0.1944774\n[5,] 0.6252168\n[6,] 0.9121284\n\n, , 2\n\n           [,1]       [,2]      [,3]       [,4]        [,5]      [,6]      [,7]\n[1,] 0.67261952 0.81357676 0.9129938 0.07847439 0.695212364 0.9965690 0.4535292\n[2,] 0.54622287 0.47057596 0.7701718 0.76087618 0.681510150 0.2870260 0.9298078\n[3,] 0.97883582 0.27574405 0.2979580 0.82688719 0.775471032 0.1091156 0.4443779\n[4,] 0.24032776 0.94651270 0.9004657 0.46679950 0.714241982 0.2785303 0.8597365\n[5,] 0.11894906 0.08771272 0.4285217 0.39392269 0.881228805 0.1175296 0.4345917\n[6,] 0.02775612 0.69773751 0.6743689 0.30370802 0.003402067 0.5098888 0.5001363\n           [,8]\n[1,] 0.01954478\n[2,] 0.48761898\n[3,] 0.77260524\n[4,] 0.09660549\n[5,] 0.18708077\n[6,] 0.32882696\n\n, , 3\n\n          [,1]      [,2]      [,3]      [,4]        [,5]      [,6]      [,7]\n[1,] 0.2438949 0.2796387 0.2310013 0.9290695 0.001803675 0.2213203 0.6040062\n[2,] 0.7087626 0.1305958 0.4242381 0.3876229 0.108581930 0.9331994 0.1862334\n[3,] 0.6429835 0.5069839 0.4480698 0.6828141 0.002890128 0.5832875 0.4345271\n[4,] 0.5077407 0.7143151 0.5654522 0.7300830 0.554731011 0.3791544 0.6306387\n[5,] 0.5006290 0.7366096 0.7772436 0.7581558 0.917714417 0.8559392 0.4371825\n[6,] 0.5524286 0.1317367 0.6158218 0.8492355 0.189386442 0.5469928 0.7492338\n           [,8]\n[1,] 0.16166402\n[2,] 0.51010555\n[3,] 0.38010010\n[4,] 0.75959259\n[5,] 0.40291563\n[6,] 0.01315346\n```\n:::\n\n```{.r .cell-code}\n# Retrieve a subset of the variable \"T0\"\n# This subset starts at position (1, 1, 1) and has a count of (2, 3, 1) along each dimension\nncvar_get(nc_Test, \"T0\", start = c(1, 1, 1), count = c(2, 3, 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]       [,2]      [,3]\n[1,] 0.8732343 0.84079581 0.9281288\n[2,] 0.8456667 0.04471953 0.8753740\n```\n:::\n\n```{.r .cell-code}\n# Retrieve attributes associated with the variable \"T0\"\nncatt_get(nc_Test, \"T0\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$units\n[1] \"cel\"\n\n$`_FillValue`\n[1] -9999\n```\n:::\n:::\n\n\n\n\n### Close\n\nWhen working with NetCDF files in R using the ncdf4 package, it's crucial to remember that opening a file establishes a connection. This prevents data corruption and conflicts. To finish, always close the file using `nc_close()` once you've completed your operations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_close(nc_Test)\n```\n:::\n\n\n\n## Create and Export\n\n\nIn this section, we will walk you through the steps to create a NetCDF file with your data. By following these steps, you'll be able to prepare your data and save it in the NetCDF format for further analysis or sharing.\n\n### Define the Dimensions\n\n\nThe initial step in creating a NetCDF dataset is **dimension** definition:\n\n- `ncdim_def()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim_lon <- ncdim_def(\"longitude\", \"degrees_east\",\n                     seq(11.72, 11.79, 0.01),\n                     longname = \"longitude\")\ndim_lat <- ncdim_def(\"latitude\", \"degrees_north\",\n                     seq(50.08, 50.13, 0.01),\n                     longname = \"latitude\")\ndim_time <- ncdim_def(\"time\", \"day since 1961-01-01 00:00:00 +00\",\n                      1:3, unlim=TRUE,\n                      longname = \"time\")\n```\n:::\n\n\nIn this example, we will create a 3D array with latitude, longitude, and time dimensions.\n\n\n### Define the Variales\n\nThe next step is to **define a variable**, but you don't need to assign values to it at this stage. There are three common attributes (name, units and dimensions) that are essential for every variable and should always be defined. Other user-defined attributes can be added later as needed.\n\n- `ncvar_def()`\n  - `name`\n  - `units`\n  - `dim`\n\nYou also have the option to create a dimension with no data values, effectively making it a null dimension. However, you can still set attributes for this dimension to store non-array information.\n\nAfter defining all the variables, it's necessary to **gather them into a list**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a variable named \"T0\" with the units \"cel\" and dimensions dim_lat, dim_lon, and dim_time.\n# The missing value for this variable is set to -9999.\nvar_T0 <- ncvar_def(\"T0\", \"cel\", list(dim_lat, dim_lon, dim_time), -9999)\n\n# Define a variable named \"crs\" with no units and no dimensions (empty list).\n# This variable is defined as NULL initially.\nvar_crs <- ncvar_def(\"crs\", \"\", list(), NULL)\n\n# Combine variables into a list\nvars <- list(var_T0, var_crs)\n```\n:::\n\n\n\n\n### Create new empty NetCDF file\n\nYou can already **create a NetCDF file** with the (list of) variables you have:\n\n- `nc_create(filename, vars)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_Create <- nc_create(\"C:\\\\Lei\\\\HS_Web\\\\data_share\\\\minibeispiel_NetCDF.nc\", vars)\n```\n:::\n\n\n\n\n### Put the Data\n\nAfter creating the NetCDF file, it will be an **empty** file in your local folder. The next step is to **populate** the file with data for each of the variables. This involves specifying the values for each variable and writing them to the file.\n\n- `ncvar_put()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncvar_put(nc_Create, var_T0, runif(6*8*3))\n```\n:::\n\n\n\n### Put Attributes\n\nWhen populating a NetCDF file, it's essential to not only specify the variable data values but also the **attributes** associated with those variables. Attributes provide crucial metadata that describes the data, such as units, long names, and other relevant information.\n\n\n- `ncatt_put()`\n\nAbsolutely, you can set attributes not only for **individual variables**. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add the \"long_name\" and \"EPSG\" attributes to the variable \"var_crs\"\nncatt_put(nc_Create, var_crs, \"long_name\", \"coordinate reference system\")\nncatt_put(nc_Create, var_crs, \"EPSG\", \"EPSG:4236\")\n```\n:::\n\n\nBut also for the entire NetCDF file as **global attributes**. Global attributes provide overarching information about the dataset, such as its title, source, creation date, and any other relevant details.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add the \"title\" and \"author\" global attributes to the NetCDF file\nncatt_put(nc_Create, 0, \"title\", \"Multidimensional data example\")\nncatt_put(nc_Create, 0, \"author\", \"Kan, Lei, kan.lei@ruhr-uni-bochum.de\")\n```\n:::\n\n\n\n### Close\n\nAt the end, **make sure to close** the connections to your NetCDF files. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_close(nc_Create)\n```\n:::\n\n\nOnce you've gone through these steps, you'll have a well-maintained NetCDF file that can be easily used for any further processing, transformations, or visualization.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}